# Напишите функцию под названием add, которая принимает два позиционных параметра, param1 и param2, и возвращает сумму двух чисел. Вызовите функцию со значениями 18 и 39 и выведите результат.

# def add(param1, param2):
#     return param1 + param2

# result = add(18, 39)
# print(result)


# Измените функцию add из второго задания так, чтобы она принимала параметры ключевых слов вместо позиционных параметров. Вызовите функцию с ключевыми аргументами param1=13 и param2=233 и выведите результат.

# def add(param1, param2):
#     return param1 + param2

# result = add(param1=13, param2=233)
# print(result)


# Напишите функцию под названием greet, которая принимает ключевой параметр name со значением по умолчанию Stranger и возвращает строку приветствия Hi, {name}.... Вызовите функцию без указания аргументов и выведите результат. Затем вызовите функцию с аргументом ключевого слова name="Severa" и выведите результат.

# def greet(name = 'Stranger'):
#     return f"Hi, {name}....."

# a = greet()
# print(a)




# Напишите лямбда-функцию, которая вычисляет квадрат числа x. Назначьте лямбда-функцию переменной с именем square и вызовите ее со значением 11. Выведите результат.

# square = lambda x: x * x

# res = square(11)
# print(res)


# numbers = [5, 4, 3, 2, 1]
# my_copy = numbers.copy()

# print(id(my_copy))
# print(id(numbers))
# 1776760479808
# 1776760628416



# Создайте список с именем fruits, содержащий элементы "strawberry", "apricot", "orange" и "grape". Напишите фрагмент кода Python, чтобы добавить элемент "apple" в конец списка и вывести обновленный список.

# fruits = ['strawberry', 'apricot', 'orange', 'grape']
# fruits.append('apple')
# print(fruits)




# Дан кортеж coordinates = (3, 5, 6). Напишите фрагмент кода Python для распаковки кортежа в три переменные x, y и z . Выведите значения этих переменных.

# coordinates = (3, 5, 6)

# x, y, z = coordinates
# print(x, y, z)




# Создайте словарь с именем person с ключами name , age и city и соответствующими значениями "Peter", 42 и "New Haven" . Напишите код для обновления значения city на "New York" и вывода обновленного словаря.

# person = {'name': 'Peter', 'age': 42, 'city': "New Haven"}
# person['city'] = "New York"
# print(person)




# Создайте списковое включение для списка квадратов чисел от 8 до 1. Выведите сформированный список.

# my_list = [8, 7, 6, 5, 4, 3, 2, 1]
# new_list = [num * num for num in my_list]
# print(new_list)

# other_list = [num * num for num in my_list if num % 2 != 0]
# print(other_list)




# Дан список numbers = [4, 8, 5, 1, 9, 7, 2, 3, 0]. Напишите код для сортировки списка по возрастанию с помощью встроенной функции sorted(). Выведите отсортированный список.

# numbers = [4, 8, 5, 1, 9, 7, 2, 3, 0]
# new_numbers = sorted(numbers)
# print(new_numbers)




# Объясните концепцию нарезки списков. Напишите код для извлечения подсписка [2, 0, 3] из заданного списка чисел.

# my_list = [1, 2, 0, 3, 4, 8, 6]
# other_list = my_list[1:4]

# print(other_list)
# print(my_list[1:4])
# [2, 0, 3]
# [2, 0, 3]




# Напишите словарное включение для создания словаря, ключами которого являются числа от 10 до 1, а значениями — их квадраты. Выведите созданный словарь.

# my_dict = {k: k ** 2 for k in range(10, 0, -1)}
# print(my_dict)
# # {10: 100, 9: 81, 8: 64, 7: 49, 6: 36, 5: 25, 4: 16, 3: 9, 2: 4, 1: 1}




# Даны множества A = {5, 4, 3, 2, 1} и B = {7, 8, 6, 5, 4}. Напишите код для нахождения объединения, пересечения, разности и симметричной разности множеств. Выведите результаты.

# a = {5, 4, 3, 2, 1}
# b = {7, 8, 6, 5, 4}

# # объединение (все элементы из обоих множеств, без дубликатов)
# union()
# c = a | b
# print(c)  # {1, 2, 3, 4, 5, 6, 7, 8}

# # пересечение (только те элементы, которые есть в обоих множествах)
# intersection()
# d = a & b
# print(d)  # {4, 5}

# # разность (элементы, которые есть в первом множестве, но которых нет во втором)
# difference()
# e = a - b
# print(e)  # {1, 2, 3}

# # симметричная разность (элементы первого и второго множества за исключением общих...)
# symmetric_difference()
# f = a ^ b
# print(f)  # {1, 2, 3, 6, 7, 8}




# Дан вложенный список matrix = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]. Напишите код для извлечения элемента 5 из списка. Затем напишите списковое включение, чтобы собрать вложенный список в один список [9, 8, 7, 6, 5, 4, 3, 2, 1]. Выведите извлеченный элемент и новый список.

# matrix = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]
# my_matrix = matrix[1][1]
# print(my_matrix)
# print(matrix[1][1])

# new_list = [elem for row in matrix for elem in row]
# print(new_list)  #[9, 8, 7, 6, 5, 4, 3, 2, 1]




# Упражнение 57. Счет за телефон

# Тарифный план мобильной связи включает в себя 50 минут разговоров и 50 смс-сообщений за $15,00 в месяц. Каждая дополнительная минута стоит $0,25, а каждое дополнительное сообщение – $0,15. Все счета за телефон включают налог на поддержку кол-центров 911 в размере $0,44, и общая сумма, включающая сумму отчислений кол-центрам, облагается налогом в размере 5 %. 
# Напишите программу, которая будет запрашивать у пользователя количество израсходованных за месяц минут разговора и смс-сообщений и отобра­жать базовую сумму тарификации, сумму за дополнительные минуты и сообщения, сумму отчислений кол-центрам 911, налог, а также итоговую сумму к оплате. При этом дополнительные звонки и сообщения необходимо выводить на экран только в случае их расходования. Убедитесь в том, что все суммы отображаются в формате с двумя знаками после запятой.

# over_limit_minutes * 0.25
# over_limit_SMS * 0.15

# tariff = 15.00
# limit_min = 50
# limit_sms = 50
# collcentre = 0.44
# tax = 0.05

# minutes = int(input("Селько минут израсходовано?: "))
# sms = int(input("Селько sms израсходовано?: "))

# over_min = minutes - limit_min
# over_sms = sms - limit_sms

# if over_min > 0 and over_sms > 0:
#     cost_add_min = over_min * 0.25
#     cost_add_sms = over_sms * 0.15
#     print(cost_add_min)
#     print(cost_add_sms)
    
#     total_pay1 = (tariff + cost_add_min + cost_add_sms + collcentre) + (tariff + cost_add_min + cost_add_sms + collcentre) * tax
#     print(f"Итоговая сумма к оплате c превышенным лимитом по мин. и смс c налогом: {total_pay1:.2f} $")

# elif over_min > 0 and over_sms <= 0:
#     cost_add_min = over_min * 0.25
#     print(cost_add_min)
    
#     total_pay2 = (tariff + cost_add_min + collcentre) + (tariff + cost_add_min + collcentre) * tax
#     print(f"Итоговая сумма к оплате за превышенный лимит по минутам c налогом: {total_pay2:.2f} $")
    
# elif over_sms > 0 and over_min <= 0:
#     cost_add_sms = over_sms * 0.15
#     print(cost_add_sms)
    
#     total_pay3 = (tariff + cost_add_sms + collcentre) + (tariff + cost_add_sms + collcentre) * tax
#     print(f"Итоговая сумма к оплате за превышенный лимит по смс c налогом: {total_pay3:.2f} $")

# else:
#     total_pay4 = (tariff + collcentre) + (tariff + collcentre) * tax
#     print(f"Итоговая сумма к оплате за тариф и налог: {total_pay4:.2f} $")


