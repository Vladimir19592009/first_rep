# МНОЖЕСТВА
# - это объект-контейнер уникальных значений,
# который работает как мате­матическое множество.

# + Все элементы в множестве должны быть уникальными. Никакие два элемента
# +не мoryr иметь одинаковое значение.

# + Множества не упорядочены, т. е. элементы в множестве не хранятся в каком-то
# +опреде­ленном порядке.

# + Хранящиеся в множестве элементы могут иметь разные типы данных.

# СОЗДАНИЕ МНОЖЕСТВА
# Для того чтобы создать множество, необходимо вызвать встроенную функцию set.
# Вот пример создания пустого множества:

# переменная = set()

# После исполнения этой инструкции переменная myset будет ссылаться на пустое множество.
# В функцию set можно также передать один аргумент. Передаваемый аргумент должен быть объектом,
# который содержит итерируемые элементы, такие как список, кортеж или строко­вое значение.
# Отдельные элементы объекта, передаваемого в качестве аргумента, становятся
# элементами множества.

# myset = set(['а', 'б', 'в'])
# В этом примере в функцию set в качестве аргумента передается список.
# После исполнения этой инструкции переменная myset ссылается на множество,
# содержащее элементы 'а', 'б', 'в'.

# Если в качестве аргумента в функцию set передать строковое значение,
# то каждый отдель­ный символ в строковом значении становится членом множества.

# myset = set('абв')

# После исполнения этой инструкции переменная myset будет ссылаться на множество,
# содержащее элементы 'а', 'б', 'в'.

# Множества не могут содержать повторяющиеся элементы. Если в функцию set передать
# аргумент, содержащий повторяющиеся элементы, то в множестве появится только один
# из этих повторяющихся элементов.

# myset = sеt('ааабв')

# Символ 'а' встречается в строковом значении многократно, но в множестве он появится
# только один раз. После исполнения этой инструкции переменная myset будет ссылаться
# на множество, содержащее элементы 'а', 'б', 'в'.

# как создать множество с элемен­тами 'один', 'два' и 'три', ведь в функцию set можно
# передавать не более одного аргумента?
#  Для того чтобы создать множество, которое нам требуется,
# необходимо в качестве аргумента в функцию set передать список,
# содержащий строковые значения 'один', 'два' и 'три'.
# Вот пример:

# myset = set(['один', 'два', 'три'])

# После исполнения этой инструкции переменная myset будет ссылаться на множество,
# со­держащее элементы 'один',' два' и 'три' .

# ПОЛУЧЕНИЕ количества элементов в множестве

# Как и со списками, кортежами и словарями, функция len используется для получения
# количества элементов в множестве:

# myset = set([0, l, 2, 3, 4, 5])
# len(myset)
# 6


# ДОБАВЛЕНИЕ и УДАЛЕНИЕ элементов

# add()

# Множества являются мутируемыми объектами, поэтому элементы можно в них добавлять
# и удалять из них. Для добавления элемента в множество
# используется метод add().
'''
myset = set()
myset.add(1)
myset.add(2)
myset.add(3)
print(myset)
# {1, 2, 3}
myset.add(2) # такой элемент уже присутствует...
print(myset)
# {1, 2, 3}  результат тотже
'''

# update()

# В множество можно добавить сразу всю группу элементов при помощи метода update().
# При вызове метода update () в качестве аргумента передается объект, который содержит
# итерируемые элементы, такие как список, кортеж, строковое значение или другое множест­во.
# Отдельные элементы объекта, передаваемого в качестве аргумента,
# становятся элемен­тами множества.
'''
myset = set([1, 2, 3])
myset.update([4, 5, 6])
print(myset)
# {1, 2, 3, 4, 5, 6}
'''
# еще один пример:
'''
set1 = set([1, 2, 3])
set2 = set([8, 9, 10])
set1.update(set2)
print(set1)
print(set2)
# {1, 2, 3, 8, 9, 10}
# {8, 9, 10}
'''
# еще один пример:
'''
myset = set([1, 2, 3])
myset.update('abc')
print(myset)
# {1, 2, 3, 'b', 'a', 'c'}
'''
# или
'''
myset = set([1, 2, 3])
myset.update(['abc'])
print(myset)
# {1, 2, 3, 'abc'}
'''

# remove (), discard ()

# Элемент из множества можно удалить либо методом remove (), либо методом discard ().
# Удаляемый элемент передается в качестве аргумента в один из этих методов, и этот элемент
# удаляется из множества. Единственная разница между этими двумя методами состоит в том,
# как они себя ведут, когда указанный элемент в множестве не найден. Метод remove()
# вызывает исключение KeyError, а метод discard() исключение не вызывает.
'''
myset = set([1, 2, 3, 4, 5])
print(myset)
# {1, 2, 3, 4, 5}

myset.remove(1)
print(myset)
# {2, 3, 4, 5}

myset.discard(5)
print(myset)
# {2, 3, 4}

myset.discard(99)
print(myset)
# {2, 3, 4}

myset.remove(99)
print(myset)
# KeyError: 99
'''

# clear ()

# Все элементы множества можно удалить путем вызова метода clear () .
# Приведенный ниже интерактивный сеанс это демонстрирует:
'''
myset = set([1, 2, 3, 4, 5])
print(myset)
# {1, 2, 3, 4, 5}
myset.clear()
print(myset)
# set()
'''

# ЦИКЛ for
# Для последовательного перебора всех элементов в множестве
# цикл for используется в при­веденном ниже общем формате:

# for переменная in множество:
#   инструкция
#   инструкция

# В данном формате переменная - это имя переменной, множество - имя множества.
# Этот цикл делает одну итерацию для каждого элемента в множестве, во время которой
# перемен­ной присваивается элемент:
'''
myset = set(['a', 'b', 'c'])
for i in myset:
    print(i)
# b
# a
# c
'''

# ПРИМЕНЕНИЕ операторов

# in и not in

# Оператор in используется для определения, существует ли значение в множестве.
'''
myset = set(['a', 'b', 'c'])
if 'b' in myset:
    print('Leter b in')
# Leter b in
'''
'''
myset = set(['a', 'b', 'c'])
if 99 not in myset:
    print('Number is not in')
# Number is not in
'''

# ОБЪЕДИНЕНИЕ множеств

# (union () ИЛИ '|' )

# Объединение двух множеств - это операция, в результате которой получается
# множество, содержащее все элементы обоих множеств. В Python для получения
# объединения двух мно­жеств вызывается метод union ():

# множество1.uniоn(множество2)

# В данном формате множествоl и множество2 - это множества. Данный метод
# возвращает множество, в которое входят элементы множестваl и множества2.
'''
set1 = set([1, 2, 3, 4])
set2 = set([2, 4, 5, 8])
set3 = set1.union(set2)
print(set3)
# {1, 2, 3, 4, 5, 8} разумеется без повторов
'''
# Для объединения двух множеств можно также использовать оператор .
# Вот общий формат выражения с использованием оператора | с двумя множествами:

# множество1 | множество2
'''
set1 = set([1, 2, 3, 4])
set2 = set([2, 4, 5, 8])
set3 = set1 | set2
print(set3)
# {1, 2, 3, 4, 5, 8}
'''

# ПЕРЕСЕЧЕНИЕ множеств (intersection () ИЛИ &)

# Пересечение двух множеств - это операция над множествами, при которой в итоговое
# множество входят только те элементы, которые находятся в обоих множествах. В Python
# для получения пересечения двух множеств вызывается метод intersection ().

# множество1.intеrsесtiоn(множество2)

# Данный метод возвращает множество,в которое входят элементы, находящиеся одновременно
# в множествеl и в множестве2.
'''
set1 = set([1, 2, 3, 4])
set2 = set([2, 4, 5, 8])
set3 = set1.intersection(set2)
print(set3)
# {2, 4}
'''
# Для нахождения пересечения двух множеств можно также использовать оператор &.
# Вот общий формат выражения с использованием оператора ( & ) с двумя множествами:

# множество1 & множество2

# Здесь множествоl и множество2 - это множества.
# Данное выражение возвращает множество, в которое входят элементы,
# находящиеся одновременно в множествеl и в множестве2.
'''
set1 = set([1, 2, 3, 4])
set2 = set([2, 4, 5, 8])
set3 = set1 & set2
print(set3)
# {2, 4}
'''

# РАЗНОСТЬ множеств ( difference () ИЛИ ( - )минус)

# - это все элементы множестваl, не входящие в множество2. Для получения
# разности двух множеств вызывается метод difference ().

# множествоl.diffеrеnсе(множество2)
'''
set1 = set([1, 2, 3, 4])
set2 = set([2, 4, 5, 8])
set3 = set1.difference(set2)
print(set3)
# {1, 3}
'''
# множествоl - множество2
'''
set1 = set([1, 2, 3, 4])
set2 = set([2, 4, 5, 8])
set3 = set1 - set2
print(set3)
# {1, 3}
'''

# СИММЕТРИЧНАЯ разность множеств (syrnmetric_difference() или ( ^ ))

# Симметричная разность двух множеств - это множество, которое содержит элементы,
# непринадлежащие одновременно обоим исходным множествам. Иными словами, это
# элемен­ты, которые входят в одно из множеств, но не входят в оба множества одновременно.

# мнoжecтвol.syrnmetric_difference(мнoжecтвo2)
'''
set1 = set([1, 2, 3, 4])
set2 = set([2, 4, 5, 8])
set3 = set1.symmetric_difference(set2)
print(set3)
# {1, 3, 5, 8}
'''
# множествоl ^ множество2
'''
set1 = set([1, 2, 3, 4])
set2 = set([2, 4, 5, 8])
set3 = set1 ^ set2
print(set3)
# {1, 3, 5, 8}
'''

# ПОДМНОЖЕСТВА и НАДМНОЖЕСТВА
# ( метод:  issubset())
# ИЛИ
# (оператор <= если: подмножество <= надмножество (возвращает True, иначе False))
# (оперетор >= если: надмножество >= подмножество (возвращает True, иначе False))

# Предположим, что имеется два множества, и одно из этих множеств содержит
# все элементы другого множества. Вот пример:
'''
set1 = set([1, 2, 3, 4]) # надмножество
set2 = set([2, 3])       # подмножество
print(set1.issubset(set2))
# False
'''
'''
set1 = set([1, 2, 3, 4])
set2 = set([2, 3])
print(set2.issubset(set1))
# True
'''
# В этом примере setl содержит все элементы set2. Это означает, что set2 является
# подмно­жеством setl. Это также означает, что setl является надмножеством set2.

# множество2.issuЬsеt(множество1)

# Данный метод возвращает True, если множество2 является подмножеством множестваl.
# В противном случае он возвращает False.


# Программа 9.3
# В этой рубрике вы рассмотрите программу 9.3, которая демонстрирует различные операции
# над множествами. Данная программа создает два множества: одно содержит имена студен­тов
# из бейсбольной команды, другое - имена студентов из баскетбольной команды. Затем
# программа выполняет приведенные ниже операции:

# + находит пересечение множеств, чтобы показать имена студентов, которые играют в
# обеих спортивных командах;

# + находит объединение множеств, чтобы показать имена студентов, которые играют в
# лю­бой команде;

# + находит разность бейсбольного и баскетбольного множеств (бейсбол -баскетбол), чтобы
# показать имена студентов, которые играют в бейсбол, но не играют в баскетбол;

# + находит разность баскетбольного и бейсбольного множеств (баскетбол - бейсбол), чтобы
# показать имена студентов, которые играют в баскетбол, но не играют в бейсбол;

# + находит симметричную разность баскетбольного и бейсбольного множеств, чтобы пока­зать
# имена студентов, которые занимаются одним из этих видов спорта, но не обоими одновременно.
'''
baseball = set(['Dgody', 'Karmen', 'Aida', 'Alisia'])
basketball = set(['Eva', 'Karmen', 'Alisia', 'Sara'])

# Напечатаем имена студентов которые занимаются бейсболом:

print('В бейсбольной команде играют: ')
for names in baseball:
    print(names)

print('В баскетбольной команде играют: ')
for names in basketball:
    print(names)

# Пересечение
print('Они играют и в бейсбол и в баскетбол: ')
for names in baseball & basketball:
    print(names)

# Объединение
print('Bce они спортсмены: ')
for names in baseball.union(basketball):
    print(names)

# Разность
print('Они играют в бейсбол но не в баскет: ')
for names in baseball - basketball:
    print(names)

print('Они играют в баскет но не бейсбол: ')
for names in basketball - baseball:
    print(names)

# Симетричная разность
print('Они занимаются только одним видом спорта: ')
for names in baseball ^ basketball:
    print(names)
'''
