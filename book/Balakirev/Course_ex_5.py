
# 5. Математические функции и работа с модулем math (Балакирев Python)
# (https://www.youtube.com/watch?v=iXbZb176OFo&list=PLA0M1Bcd0w8yWHh2V70bTtbVxJICrnJHd&index=5)

# abs() - ф-ия выполняет преобразование числового значения в абсолютное числовое значение:
# print(abs(-5))  # 5

# min()/max() - ф-ия возвращает минимальное/максимальное значение:
# print(min(2, 4, 7, 6, 3))  # 2
# print(max(2, 4, 7, 6, 3))  # 7

# pow() - ф-ия возводит число в определенную степень:
# print(pow(5, 3))  # 125 (аналог 5 ** 3)

# round() - ф-ия округляет значение до ближайшего значения (х.5 неопределённое положение: округляется либо в большую либо в меньшую сторону)
# print(round(1.5))  # 2
# print(round(0.5))  # 0
# print(round(10.5))  # 10
# print(round(12.5))  # 12

# print(round(12.523687, 2))  # 12.52  (значение 2 показывает до какого знака после запятой округлять)

# print(round(12.523687, -1))  # 10  (значение -1 показывает до какого знака до запятой округлять)
# print(round(512.523687, -2))  # 500  (значение -2 показывает до какого знака до запятой округлять)
# print(round(512.523687, -3))  # 1000  (значение -3 показывает до какого знака до запятой округлять)


# import math

# math.ceil()  # округление значения до наибольшего целого
# print(math.ceil(5.2))  #  6
# print(math.ceil(-5.2))  # -5

# math.floor()  # округление значения до наименьшего целого
# print(math.floor(5.2))  # 5
# print(math.floor(-5.2))  # -6

# math.factorial()  # вычисляет факториал числа
# print(math.factorial(6))  # 720

# math.trunc()  # отбрасывает дробную часть числа
# print(math.trunc(5.8))  # 5 (аналог int(5.8))

# print(math.log2(4))  # 2.0 (вычисляет логарифм четырёх по основаню два)
# print(math.log10(1000))  # 3.0 (вычисляет логарифм четырёх по основаню два)
# print(math.log(2.7))  # 0.9932517730102834 (вычисляет натуральный логарифм )
# print(math.log(27, 3))  # 3.0 (вычисляет натуральный логарифм 27 по основаню три)

# print(math.sqrt(49))  # 7  (вычисляет корень из 49)

# print(math.pi)  # 3.141592653589793
# print(math.e)  # 2.718281828459045


# 6. ФУНКЦИЯ print() and input()
# (https://www.youtube.com/watch?v=8hzpSR_Qaj8&list=PLA0M1Bcd0w8yWHh2V70bTtbVxJICrnJHd&index=6)

# Для print()
# sep - разделитель между данными
# end - завершающий символ или строка

# a = 6.55
# b = 7
# c = 3.56
# print(a, b, c)  # 6.55 7 3.56 (разделены просто пробелом)
# print(a, b, c, sep='***')  # 6.55***7***3.56
# print(a, b, c, sep='...')  # 6.55...7...3.56

# print(a)
# print(b)
# print(c)
# 6.55
# 7
# 3.56

# print(a, end=' ')
# print(b, end=' ')
# print(c)
# 6.55 7 3.56

# Для input()
# a = input()
# print(a, type(a))  # 5697WWop <class 'str'> (любой вывод является строкой)

# Пример: Написать программу вычисления периметра прямокгольника (данные должен ввести пользователь):
# a, b = map(float, input("Введите через пробел две стороны прямоугольника: ").split())
# print("Периметр равен: ", 2*(a+b))


# СТРОКИ (не изменяемый объект)

# s1 = "Panda"
# s2 = 'Puma'
# print(s1, s2)  # Panda Puma

# 10. Основные методы строк:
# s = 'Python'

# объект.метод(аргументы)

# print(s.upper())  # PYTHON  (возвращает строку заглавными буквами)
# print(s)  # Python

# print(s.lower())  # python  (возвращает строку малыми буквами)
# print(s)  # Python

# метод count() подсчитывает число вхождений подстроки в строке(срезе строки):
# msg = 'abrakadabra'
# print(msg.count('ra'))         # 2
# print(msg.count('ra', 4))      # 1
# print(msg.count('ra', 4, 10))  # 0
# print(msg.count('ra', 4, 11))  # 1

# метод find() возвращает индекс первого найденного вхождения подстроки в строке(срезе строки):
# print(msg.find('br', 2, len(msg)+1))   # 8
# если включение отсутствует, то find() возвращает (-1)
# print(msg.find('bro'))          # -1

# если метод find() осуществляет поиск слева-направо, то
# мотод rfind() наоборот справа-налево:

# print(msg.rfind('ra'))         # 9
# print(msg.rfind('br'))         # 8

# метод replace() заменяет подстроку (old) на (new): 
# print(msg.replace('a', 'o'))     # obrokodobro
# print(msg.replace('a', 'o', 2))  # obrokadabra  (замена производит только в двух первых местах)
# print(msg.replace('ab', 'AB'))   # ABrakadABra
# print(msg.replace('ab', ''))     # rakadra  (заменяет 'ab' на отсутствие пробела)

# метод isalpha() проверяет вся ли строка состит из букв и возвращает True or False:
# print(msg.isalpha())            # True
# print('hello world'.isalpha())  # False (потому что имеется пробел (не буква))

# метод isdigit() проверяет вся ли строка состит из цифр и возвращает True or False:
# print('5.6'.isdigit())          # False (в строке присутствует точка (не цифра))
# print('56'.isdigit())          # True

# метод rjust() возвращает новую строку с заданным количеством символов и при необходимости добавляет слева символы заполнители (по умолчанию пробелы)
# d = 'abc'
# print(d.rjust(5))
#   abc  (добавились два пробела (всего стало пять символов))

# d = '12'
# print(d.rjust(5, '0'))  # заполнителями будут нули справа
# 00012
# print(d.ljust(9, '*'))  # заполнителями будут звёздочки слева
# 12*******

# метод split() возвращает коллекцию строк на которые разбивается исходная строка. Разбивка осуществляется по определённому параметру:
# d = 'Иванов Иван Иванович'
# print(d.split(' '))
# ['Иванов', 'Иван', 'Иванович']

# d = '1, 2,3,  4,5,6'
# print(d.replace(' ', '').split(','))  # удаляем все пробелы и разбиваем по запятым, возвращая колл-ю строк:
# ['1', '2', '3', '4', '5', '6']

# метод join() противоположный split() - из списка строк собирает единую строку:
# d = ['1', '2', '3', '4', '5', '6']
# print(', '.join(d))
# 1, 2, 3, 4, 5, 6

# метод strip() удаляет все символы пробелов и переноса строк вначале и в конце строки. Например:
# a = "    hello world    \n ".strip()
# print(a)  # hello world

# a = "    hello world    \n ".rstrip()
# print(a)  #     hello world  # удалились пробелы и переносы српава

# a = "    hello world    \n ".lstrip()
# print(a)  # hello world    # удалились пробелы и переносы слева (при выводе через принт \n не консоль не выводится)



#11. СПЕЦСИМВОЛЫ, экранирование символов, raw-строки
# (https://www.youtube.com/watch?v=VZsWVN6QaKc&list=PLA0M1Bcd0w8yWHh2V70bTtbVxJICrnJHd&index=11)

# символ перевода строки \n (при подсчете кол-ва символов читается как один симвл)
# символ обратного слеша \\ (когда необходимо продемонстрировать обратный слеш (\) экранирование)

# row строки: исключают экранирование: (когда необходимо прописать пути к файлам)

# path = "D:\\Pithon\\Projects\\stepik\\text.txt"
# print(path)  # D:\Pithon\Projects\stepik\text.txt

# # то же самое с помощью row-строки:
# path = r"D:\Pithon\Projects\stepik\text.txt"
# print(path)  # D:\Pithon\Projects\stepik\text.txt



#12. ФОРМАТИРОВАНИЕ строк: метод format и F-строки
# (https://www.youtube.com/watch?v=DOxzzkjTcgI&list=PLA0M1Bcd0w8yWHh2V70bTtbVxJICrnJHd&index=12)

# Рассмотрим пример:
age = 18
name = 'Сергей'

print("Меня зовут " + name + ", мне " + str(age) + " и я люблю язык Пайтон.")
# Меня зовут Сергей, мне 18 и я люблю язык Пайтон.

# удобней использовать:   String.format(*arg)
print("Меня зовут {0}, мне {1} и я люблю язык Пайтон.".format(name, age))  # 0 и 1 индексы ф-ии format()
# Меня зовут Сергей, мне 18 и я люблю язык Пайтон.

# ещё вариант:
msg = ("Меня зовут {fio}, мне {old} и я люблю язык Пайтон.".format(fio=name, old=age))
print(msg)
# Меня зовут Сергей, мне 18 и я люблю язык Пайтон.
# использование ключей (fio, old) более предпочтительно.


# Python 3.6  F-строки:  (PEP498: https://peps.python.org/pep-0498/)

# F-строки предоставляют способ встраивать выражения в строковые литералы, используя минимальный синтаксис. Следует отметить, что f-строка на самом деле является выражением, вычисляемым во время выполнения, а не постоянным значением. В исходном коде Python f-строка представляет собой литеральную строку с префиксом 'f', которая содержит выражения внутри фигурных скобок. Выражения заменяются их значениями.

print(f'Меня зовут {name.upper()}, мне {age * 2} и я люблю язык Пайтон.')
# Меня зовут СЕРГЕЙ, мне 36 и я люблю язык Пайтон.
