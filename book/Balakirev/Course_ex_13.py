
# 13. СПИСКИ - операторы и функции работы с ними
# (https://www.youtube.com/watch?v=HgFGVQG20Oc&list=PLA0M1Bcd0w8yWHh2V70bTtbVxJICrnJHd&index=13)

# список - упорядоченная изменяемая коллекция данных и могут содержать все возможные типы данных
# метод len()
# lst = ['Moscow', 2034, 5.8, True, [1, 2, 3], (5, 6, 7), {1: 'Alice', 2: 'Bob'}]
# print(len(lst))   # 7
# print(lst[4][1])  # 2  (в четвёртом (по индексу) элементе списка lst находим первый (по индексу) элемент)
# print(lst[5][0])  # 5  (в пятом (по индексу) элементе списка lst находим нулевой (по индексу) элемент)
# print(lst[6][1])  # Alice  (в шестом (по нидексу) элементе списка lst достаём значение по ключу)

# метод max()
# метод min()
# метод sum()
# метод sorted()

# ls1 = ['Moscow', 2034, 5.8, True]
# ls2 = [3, 5, 6]


# (+) соединение двух списков в один
# print(ls1 + ls2)  # ['Moscow', 2034, 5.8, True, 3, 5, 6]

# (*) дублирование списка
# print(ls1 * 2)  # ['Moscow', 2034, 5.8, True, 'Moscow', 2034, 5.8, True]

# (in) проверка вхождения элемента в список
# print('Moscow' in ls1)  # True

# del удаление элемента списка
# del ls1[1]
# print(ls1)  # ['Moscow', 5.8, True]


# 14. СРЕЗЫ списков и сравнение списков
# (https://www.youtube.com/watch?v=Vx3s01Yb1P8&list=PLA0M1Bcd0w8yWHh2V70bTtbVxJICrnJHd&index=14)

# список[старт:стоп]
# lst = ['Москв', 'Уфа', 'Тверь', 'Казань']
# print(lst[1:3])  # ['Уфа', 'Тверь']
# a = lst[1:3]  # Эта коллекция совершенно независима от lst
# a[0] = 'Воронеж'
# print(a)  # ['Воронеж', 'Тверь']

# для получения копии списка lst делаем так:
# cities = lst[:]
# print(cities)  # ['Москв', 'Уфа', 'Тверь', 'Казань']
# # чтобы убедится, что списки разные проверим их по id:
# print(id(lst))      # 1503009547200
# print(id(cities))   # 1503011589376

# пример:
# marks = [2, 3, 4, 3, 5, 2]
# print(marks[1:5:2])  # [3, 3]  (срез по индексам от 1 до 5 с шагом 2)
# print(marks[:5:2])  # [2, 4, 5]  (срез по индексам от 0 до 5 с шагом 2)
# print(marks[1::2])  # [3, 3, 2]  (срез по индексам от 1 до конца с шагом 2)
# print(marks[::2])  # [2, 4, 5]  (срез по индексам от 0 до конца с шагом 2)
# print(marks[::-1])  # [2, 5, 3, 4, 3, 2]  (срез по индексам от конца до начала (инверсия))
# print(marks[::-2])  # [2, 3, 3]  (срез по индексам от конца до начала с шагом -2)

# marks[2:4] = ['xop', 'уд']
# print(marks)  # [2, 3, 'хор', 'уд', 5, 2]

# marks[:5:2] = [0, 0, 0]
# print(marks)  # [0, 3, 0, 'уд', 0, 2]

# marks[2:4] = 10, 11
# print(marks)  # [0, 3, 10, 11, 0, 2]


# СРАВНЕНИЕ списков:  (операторы сравнения >, <, ==, !=)
# a = [1, 2, 3]
# b = [1, 2, 3]

# print(a > b)  # False
# print(a < b)  # False
# print(a == b)  # True
# print(a != b)  # False


# 15. Основные методы списков (  объект.метод(аргументы)  ) все методы изменяют сам список.
# (https://www.youtube.com/watch?v=1r9X3drypHk&list=PLA0M1Bcd0w8yWHh2V70bTtbVxJICrnJHd&index=15)

# a = [1, -54, 3, 23, 43, -45, 0]

# метод append() доббавляет элемент (аргумент) в конец списка, изменяя при этом сам список:
# a.append(100)
# print(a)        # [1, -54, 3, 23, 43, -45, 0, 100]
# a.append(True)
# print(a)        # [1, -54, 3, 23, 43, -45, 0, 100, True]
# a.append([1, 2, 3])
# print(a)        # [1, -54, 3, 23, 43, -45, 0, 100, True, [1, 2, 3]]


# метод insert() позволяет вставлять в список в опеделенную позицию определённые значения
# (    lst.insert(индекс, значение)    )
# a = [1, -54, 3, 23, True, 43, -45, 0]

# a.insert(3, -1000)
# print(a)    # [1, -54, 3, -1000, 23, True, 43, -45, 0]


# метод remove() позволяет удалить элемент строки (первый который встречается слева направо) по его значению (названию):
# a.remove(23)
# print(a)    # [1, -54, 3, -1000, True, 43, -45, 0]
# следует иметь ввиду то, что при удалении булевых значений (True или False) будут удалены (1 или 0) если (1 или 0) будут расположены левее чем (True или False). Пайтон приводит к числовым значениям True False (1 и 0) соответственно.
# a.remove(True)
# print(a)    # [-54, 3, -1000, True, 43, -45, 0]  (как видим удалена единица)
# если повторить упражнение :) то наконец будет удалён элемент True (т.к. единиц перед ним нет)
# a.remove(True)
# print(a)    # [-54, 3, -1000, 43, -45, 0]  (так и есть)
# a.remove(False)
# print(a)    # [-54, 3, -1000, 43, -45]  (теперь и нолик пропал :)


# метод pop() удаляет последний элемент списка и возвращает его:
# ed = a.pop()
# print(ed)  # -45
# print(a)    # [-54, 3, -1000, 43]

# метод pop() может удалить любой элемент списка по его индексу (индекс в качестве аргумента):
# ed = a.pop(2)
# print(ed)  # -1000
# print(a)   # [-54, 3, 43]


# метод clear()  удаляет весь список элементов:
# a = [1, -54, 3, 23, True, 43, -45, 0]
# a.clear()
# print(a)  # []


# метод copy()  создаёт копию списка и это будет совершенно другой список со своим id:
# a = [1, -54, 3, 23, True, 43, -45, 0]
# print(a)  # [1, -54, 3, 23, True, 43, -45, 0]
# c = a.copy()
# print(c)  # [1, -54, 3, 23, True, 43, -45, 0]
# print(id(a), id(c))  # 2459955471296 2459957525312 (id разные)
# есть аналоги создания копий списков: с = a[:] и c = list(a)


# метод count() возвращает количество(число) элементов с указанным значением:
# print(a.count(1))  # 2  (значение True это тоже единица)


# метод index() возвращает индех указанного значения в списке. Если таких значений несколько, то будет возвращён индекс первого из них.
# print(a.index(43))  # 5

# print(a.index('kdfjfn'))  # ValueError: 'kdfjfn' is not in list
# перед применением метода  можно прверить есть ли такое значение в списке:
# if 'kdfjfn' not in a:
#     print("'kdfjfn' is not in list")


# метод reverse() в действующем списке меняет порядок следования элементов(значений) на обратный:
# a = [1, -54, 3, 23, True, 43, -45, 0]
# a.reverse()
# print(a)  # [0, -45, 43, True, 23, 3, -54, 1]


# метод sort() позволяет в действующем списке менять не по убыванию порядок следования значений:
# a.sort()
# print(a)  # [-54, -45, 0, True, 1, 3, 23, 43]


# 16. ВЛОЖЕННЫЕ списки, многомерные списки
# (https://www.youtube.com/watch?v=FBCufeNGQio&list=PLA0M1Bcd0w8yWHh2V70bTtbVxJICrnJHd&index=16)

# Двумерный список - это список, который в качестве своих элементов содержит другие списки.
# Элементы списка могут быть практически чем угодно, включая другие списки.

img = [[1, 2, 3, 4, 5], 
       [6, 7, 8, 9, 10], 
       [11, 12, 13, 14, 15], 
       [16, 17, 18, 19, 20], 
       [21, 22, 23, 24, 25]
       ]

print(img[0])  # так выводим первый список списков под индексом [0].
# [1, 2, 3, 4, 5]

# Для обращения к конкретному элементу списка требуется обращаться по индексам. Например нужно извлеч число 20 из четвертой строки:
print(img[3][4])  # 20

# Можем заменить например второй вложенный список таким образом:
img[1] = [0, 0, 0, 0, 0]
print(img)  
# [[1, 2, 3, 4, 5], [0, 0, 0, 0, 0], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]

# теперь отредактируем его
img[1][:] = [1] * 5
print(img)  
# [[1, 2, 3, 4, 5], [1, 1, 1, 1, 1], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]
