# Структуры с повторением:
# Струкrура с повторением исполняет инструкции или набор инструкций многократно.

# Цикл while: цикл с условием повторения (пока)
# исnолняет инструкции или набор инструкций nовторно
# до тех пор, пока условие является истинным.
# общий формат цикла с условием повторения:

# while условие:
#     инструкция
#     инструкция

# Цикл for: цикл со счетчиком повторений
# повторяется заданное количество раз.
# Вот ее общий формат:

# for переменная in [значениеl, значение2, ... ] :
#     инструкция
#     инструкция

# Инструкция for исполняется следующим образом: переменной присваивается
# первое значе­ние в списке, и затем исполняются инструкции, которые
# расположены в блоке. Далее пере­менной присваивается следующее значение
# в списке, и инструкции в блоке исполняются снова. Этот процесс продолжается
# до тех пор, пока переменной не будет присвоено послед­нее значение в списке.

# Применение функции range (диапазон) с циклом for:

# for num in range(5):   # Итерируе­мый объект аналогичен списку диапазоне от О до (но не включая 5)
# print(num)

# тоже самое:

# for num in range[0, 1, 2, 3, 4]
# print(num)

# Если передать функции range один аргумент, тоэтот аргумент используется в качестве конечного
# предела последовательности чисел. Если передать функции range два аргумента, то первый
# аргумент используется в качестве начального значения последовательности, второй аргумент -
# в качестве ее конечного предела:
'''
for num in range(1, 5):
    print(num)
1
2
3
4
'''
# Если передать функции range третий аргу­мент, то этот аргумент
# используется в качестве величины шага (INCREMENT).
'''
for num in range(1, 10, 2):
    print(num)
1
3
5
7
9
'''
# Вывести чиса от 1 до 4 и их квадраты:
'''
for number in range(1, 5):
    square = number ** 2
    print(f"{number}\t {square}")
1        1
2        4
3        9
4        16
'''
# Порождение итерируемой последовательности в диапазоне
# от максимального до минимального значения:

#  функцию range можно применить для создания последовательностей чисел,
# которые проходят в обратном порядке от максимального до минимального значения.
'''
for num in range(10, 0, -1):
    print(num)
# 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
'''
'''
for num in range(10, 5, -1):
    print(num)
# 10, 9, 8, 7, 6
'''

# Вычисление нарастающего итога
# это сумма чисел, которая накапливается с каждой итерацией цикла.
# для этого используются 2 эдемента:
# цикл, читающий каждое число в ряду и переменную, накапливающую сумму чисел по мере их чтения.

# Расширенные операторы присваивания
#   +=	    x += 5	    x = x + 5
#   -=	    y -= 3	    y = y - 3
#   *=	    z *= 4	    z = z * 4
#   /=	    a /= 3	    a = a / 3
#   //=	    b //= 4	    b = b // 4
#   %=	    c %= 3	    c = c % 3
#   **=	    d **= 3	    d = d ** 3
#   &=	    e &= 3	    e = e & 3
#   ^=	    g ^= 5	    g = g ^ 5
#   <<=	    h <<= 1	    h = h << 1
#   >>=	    i >>= 2	    i = i >> 2

# &=: побитовое И
# |=: побитовое ИЛИ
# ^=: побитовое исключающее ИЛИ
# <<=: побитовое сдвиг влево
# >>=: побитовое сдвиг вправо
'''
total = 0.0
for count in range(1, 6):
    total = total + count
    print(total)
'''
'''
num1 = 10
num2 = 5
num1 = num1 + num2
print(num1)
print(num2)
'''

# Применение вложенных циклов для печати комбинаций символов

# Эта программа прямоугольную комбинацию:
'''
rows = int(input("Сколько строк вводить: "))
cols = int(input("Склько столбцов вводить: "))
for r in range(rows):
    for c in range(cols):
        print('*', end=' ') # end= (обеспечивает горизонтальность звездочек, a ('') расстояние между ними).
    print()
'''
# Эта программа выстраивает треугольную комбинацию (основание 1* вершина 8*):
'''
BASE_SIZE = 8
cols = 8
for r in range(BASE_SIZE):
    for c in range(cols - r):
        print('*', end=' ')
    print()
'''
# Эта программа выстраивает треугольную комбинацию (основание 8* вершина 1*):
'''
BASE_SIZE = 8

for r in range(BASE_SIZE):
    for c in range(r + 1):
        print('*', end=' ')
    print()
'''
# Бесконечные циклы: (Единственный способ остановить эту программу состоит
# в нажатии комбинации клавиш <Ctrl>+<C> для ee прерывания.

# 1. Напишите цикл while,
# который позволяет пользователю ввести число. Число должно быть умножено на 10,
# и результат присвоен переменной c именем product. Цикл должен повторяться
# до тех пор, пока product меньше 100.
'''
num = int(input('Введите число: '))
product = 0

while product < 100:
    product = product + num * 10
    print(product)
'''

# 3. Напишите цикл for, который выводит приведенный ниже ряд чисел:
# 0, 10, 20, 30, 40, 50, ... , 100
'''
for num in range(0, 101, 10):
    print(num, end=' ')
'''

# 4. Напишите цикл,
# который просит пользователя ввести число. Цикл должен выполнить 5 итераций
# и вести учет нарастающего итога введенных чисел.
'''
MAX = 5
total = 0

for counter in range(MAX):
    num = int(input('Enter a nunber: '))
    total = total + num
    print(total)
'''
# 5.Написать цикл который вычисляет
# сумму числового ряда: 1/5 + 2/4 + 3/3 + 4/2 + 5/1
'''
total_sum = 0  # Инициализация переменной для хранения суммы
n = 5
for i in range(1, n+1):  # Цикл от 1 до 5 включительно
    total_sum += i / ((n+1) - i)  # Суммирование i / ((n+1) - i)
print(f'{total_sum:.4f}')
'''
# Упражнения по проrраммированию:

# 1. Сборщик ошибок. Сборщик ошибок собирает ошибки каждый день в течение пяти дней.
# Напишите программу, которая ведет учет нарастающего итога ошибок, собранных в те­
# чение пяти дней. Цикл должен запрашивать количество ошибок, собираемых в течение
# каждого дня, и когда цикл завершается, программа должна вывести общее количество
# собранных ошибок.
'''
MAX = 5
total_mist = 0

for i in range(MAX):
    num = int(input('Enter number of errors: '))
    total_mist = total_mist + num
print(total_mist)
'''
# 2. Сожженные калории.
# Бег на беговой дорожке позволяет сжигать 4,2 калорий в минуту.
# Напишите программу, которая применяет цикл для вывода количества калорий,
# сожжен­ных после 1О, 15, 20, 25 и 30 минут бега.
'''
calorie_exp = 4.2
for i in range(10, 31, 5):
    total_calorie = calorie_exp * i
    print(f'{total_calorie:.2f}')
'''
# 3. Анализ бюджета.
# Напишите программу, которая просит пользователя ввести сумму,выделенную им на один месяц.
# Затем цикл должен предложить пользователю ввести суммы отдельных статей его расходов за месяц
# и подсчитать их нарастающим итогом.
# По завершению цикла программа должна вывести сэкономленную или перерасходованную сумму.
'''
monthly_budget = float(input('Бюджет на месяц сотавляет: '))
total_expenses = 0
another = 'y'

while another == 'y' or another == 'Y':
    exp = float(input('Введите потраченнкю сумму: '))
    total_expenses += exp
    rest = monthly_budget - total_expenses
    print(f'Расходы: {total_expenses:.2f}')
    another = input('Еще расходы есть? ' + '(Введи y если да): ')
print(f'Остаток бюджета:  {rest:.2f}')
'''
