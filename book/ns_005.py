# Структуры с повторением:
# Струкrура с повторением исполняет инструкции или набор инструкций многократно.

# Цикл while: цикл с условием повторения (пока)
# исnолняет инструкции или набор инструкций nовторно
# до тех пор, пока условие является истинным.
# общий формат цикла с условием повторения:

# while условие:
#     инструкция
#     инструкция

# Цикл for: цикл со счетчиком повторений
# повторяется заданное количество раз.
# Вот ее общий формат:

# for переменная in [значениеl, значение2, ... ] :
#     инструкция
#     инструкция

# Инструкция for исполняется следующим образом: переменной присваивается
# первое значе­ние в списке, и затем исполняются инструкции, которые
# расположены в блоке. Далее пере­менной присваивается следующее значение
# в списке, и инструкции в блоке исполняются снова. Этот процесс продолжается
# до тех пор, пока переменной не будет присвоено послед­нее значение в списке.

# Применение функции range (диапазон) с циклом for:

# for num in range(5):   # Итерируе­мый объект аналогичен списку диапазона от О до 5 (но не включая 5)
# print(num)

# тоже самое:

# for num in range[0, 1, 2, 3, 4]
# print(num)

# Если передать функции range один аргумент, тоэтот аргумент используется в качестве конечного
# предела последовательности чисел. Если передать функции range два аргумента, то первый
# аргумент используется в качестве начального значения последовательности, второй аргумент -
# в качестве ее конечного предела:
'''
for num in range(1, 5):
    print(num)
1
2
3
4
'''
# Если передать функции range третий аргу­мент, то этот аргумент
# используется в качестве величины шага (INCREMENT).
'''
for num in range(1, 10, 2):
    print(num)
1
3
5
7
9
'''
# Вывести чиса от 1 до 4 и их квадраты:
'''
for number in range(1, 5):
    square = number ** 2
    print(f"{number}\t {square}")
1        1
2        4
3        9
4        16
'''
# Порождение итерируемой последовательности в диапазоне
# от максимального до минимального значения:

#  функцию range можно применить для создания последовательностей чисел,
# которые проходят в обратном порядке от максимального до минимального значения.
'''
for num in range(10, 0, -1):
    print(num)
# 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
'''
'''
for num in range(10, 5, -1):
    print(num)
# 10, 9, 8, 7, 6
'''

# Вычисление нарастающего итога
# это сумма чисел, которая накапливается с каждой итерацией цикла.
# для этого используются 2 элемента:
# цикл, читающий каждое число в ряду, и переменную, накапливающую сумму чисел по мере их чтения.

# Расширенные операторы присваивания
#   +=	    x += 5	    x = x + 5
#   -=	    y -= 3	    y = y - 3
#   *=	    z *= 4	    z = z * 4
#   /=	    a /= 3	    a = a / 3
#   //=	    b //= 4	    b = b // 4
#   %=	    c %= 3	    c = c % 3
#   **=	    d **= 3	    d = d ** 3
#   &=	    e &= 3	    e = e & 3
#   ^=	    g ^= 5	    g = g ^ 5
#   <<=	    h <<= 1	    h = h << 1
#   >>=	    i >>= 2	    i = i >> 2

# &=: побитовое И
# |=: побитовое ИЛИ
# ^=: побитовое исключающее ИЛИ
# <<=: побитовое сдвиг влево
# >>=: побитовое сдвиг вправо
'''
total = 0.0
for count in range(1, 6):
    total = total + count
    print(total)
'''
'''
num1 = 10
num2 = 5
num1 = num1 + num2
print(num1)
print(num2)
'''

# Применение вложенных циклов для печати комбинаций символов

# Эта программа прямоугольную комбинацию:
'''
rows = int(input("Сколько строк вводить: "))
cols = int(input("Склько столбцов вводить: "))
for r in range(rows):
    for c in range(cols):
        print('*', end=' ') # end= (обеспечивает горизонтальность звездочек, a ('') расстояние между ними).
    print()
'''
# Эта программа выстраивает треугольную комбинацию (основание 1* вершина 8*):
'''
BASE_SIZE = 8
cols = 8
for r in range(BASE_SIZE):
    for c in range(cols - r):
        print('*', end=' ')
    print()
'''
# Эта программа выстраивает треугольную комбинацию (основание 8* вершина 1*):
'''
BASE_SIZE = 8

for r in range(BASE_SIZE):
    for c in range(r + 1):
        print('*', end=' ')
    print()
'''
# Бесконечные циклы: (Единственный способ остановить эту программу состоит
# в нажатии комбинации клавиш <Ctrl>+<C> для ee прерывания.

# 1. Напишите цикл while,
# который позволяет пользователю ввести число. Число должно быть умножено на 10,
# и результат присвоен переменной c именем product. Цикл должен повторяться
# до тех пор, пока product меньше 100.
'''
num = int(input('Введите число: '))
product = 0

while product < 100:
    product = product + num * 10
    print(product)
'''

# 3. Напишите цикл for, который выводит приведенный ниже ряд чисел:
# 0, 10, 20, 30, 40, 50, ... , 100
'''
for num in range(0, 101, 10):
    print(num, end=' ')
'''

# 4. Напишите цикл,
# который просит пользователя ввести число. Цикл должен выполнить 5 итераций
# и вести учет нарастающего итога введенных чисел.
'''
MAX = 5
total = 0

for counter in range(MAX):
    num = int(input('Enter a nunber: '))
    total = total + num
    print(total)
'''
# 5.Написать цикл который вычисляет
# сумму числового ряда: 1/5 + 2/4 + 3/3 + 4/2 + 5/1
'''
total_sum = 0  # Инициализация переменной для хранения суммы
n = 5
for i in range(1, n+1):  # Цикл от 1 до 5 включительно
    total_sum += i / ((n+1) - i)  # Суммирование i / ((n+1) - i)
print(f'{total_sum:.4f}')
'''
# Упражнения по проrраммированию:

# 1. Сборщик ошибок.
# Сборщик ошибок собирает ошибки каждый день в течение пяти дней.
# Напишите программу, которая ведет учет нарастающего итога ошибок, собранных в те­
# чение пяти дней. Цикл должен запрашивать количество ошибок, собираемых в течение
# каждого дня, и когда цикл завершается, программа должна вывести общее количество
# собранных ошибок.
'''
MAX = 5
total_mist = 0

for i in range(MAX):
    num = int(input('Enter number of errors: '))
    total_mist = total_mist + num
print(total_mist)
'''
# 2. Сожженные калории.
# Бег на беговой дорожке позволяет сжигать 4,2 калорий в минуту.
# Напишите программу, которая применяет цикл для вывода количества калорий,
# сожжен­ных после 1О, 15, 20, 25 и 30 минут бега.
'''
calorie_exp = 4.2
for i in range(10, 31, 5):
    total_calorie = calorie_exp * i
    print(f'{total_calorie:.2f}')
'''
# 3. Анализ бюджета.
# Напишите программу, которая просит пользователя ввести сумму,выделенную им на один месяц.
# Затем цикл должен предложить пользователю ввести суммы отдельных статей его расходов за месяц
# и подсчитать их нарастающим итогом.
# По завершению цикла программа должна вывести сэкономленную или перерасходованную сумму.
'''
monthly_budget = float(input('Бюджет на месяц сотавляет: '))
total_expenses = 0
another = 'y'

while another == 'y' or another == 'Y':
    exp = float(input('Введите потраченнкю сумму: '))
    total_expenses += exp
    rest = monthly_budget - total_expenses
    print(f'Расходы: {total_expenses:.2f}')
    another = input('Еще расходы есть? ' + '(Введи 'y' если да): ')
print(f'Остаток бюджета:  {rest:.2f}')
'''
# 5. Средняя толщина слоя дождевых осадков.
# Напишите программу, которая применяет вложенные циклы для сбора данных и вычисления
# средней толщины слоя дождевых осадков за ряд лет. Программа должна сначала запросить
# количество лет.
# Внешний цикл будет выполнять одну итерацию для каждого года. Внутренний цикл будет
# делать четыре (4) итерации, одну для каждого квартала. Каждая итерация внутреннего цикла
# запрашивает у пользователя миллиметры дождевых осадков в течение прошедшего квартала.
# После всех итераций программа должна вывести количество кварталов, общее количество
# миллиметров дождевых осадков и среднюю толщину слоя дождевых осадков за квартал в
# течение всего периода.
'''
num_years = int(input('Кол-во лет наблюдений: '))

quar = 4  # кварталов в году
num_quarter = num_years * quar
total_rainfall = 0 # осадки за все время наблюдений
rain_year = 0 # осадки за год

for i in range(num_years):
    for j in range(quar):
        rain_quarter = int(input('Введите осадки за пошедший квартал: '))
        rain_year += rain_quarter

total_rainfall += rain_year

print(f'Осадки за все время наблюдений: {total_rainfall:}')
print(f'Кол-во кварталов наблюдений: {num_quarter:}')
print(f'Среднее кол-во осадков в квартал за все время: {total_rainfall / num_quarter:}')
'''
# 6. Таблица соответствия между градусами Цельсия и градусами Фаренгейта.
# Напиши­те программу, которая выводит таблицу температур по шкале Цельсия от О до 15 и их
# эквиваленты по Фаренгейту. Формула преобразования температуры из шкалы Цельсия
# в шкалу Фаренгейта:
# F=9/5*C+32.
# где F - это температура по шкале Фаренгейта; С - температура по шкале Цельсия.
# Для вывода этой таблицы ваша программа должна применить цикл.
'''
print('t C \t t F')
print('-------------')

for temperature_c in range(0, 16):
    temperature_f = temperature_c * 9 / 5 + 32
    print(f'{temperature_c} \t {temperature_f}')
'''
# 7. Мелкая монета для зарплаты.
# Напишите программу, которая вычисляет денежную сумму, которую человек заработает в течение периода
# времени, если в первый день его зарплата составит одну копейку, во второй день две копейки и каждый
# последующий день будет удваиваться.
# Программа должна запросить у пользователя количество дней,
# вывести таблицу, показывающую зарплату за каждый день, и затем
# показать заработную плату до налоговых и прочих удержаний в конце периода.
# Итоговый результат должен быть выведен в рублях, а не в количестве копеек.
'''
days = int(input('Кол-во отработанных дней '))

print('Pab. день \t 3.плата')
print('----------------------')
# Начальная зарплата в копейках
salary_first = 1
# Инициализируем переменную для хранения общей зарплаты
total_salary = 0

for i in range(1, (days + 1)):
    print(f'{i:>8} \t\t {salary_first}')
    total_salary = total_salary + (salary_first)
    salary_first = salary_first * 2
# Переводим общую зарплату в рубли
total_salary_in_rubles = total_salary / 100
print({total_salary})
print(f'{total_salary_in_rubles:.2f}')
'''
# 9. Уровень океана.
# Допустим, что уровень океана в настоящее время повышается пример­но на 1,6 мм в год.
# С учетом этого создайте приложение, которое выводит количество миллиметров,
# на которые океан будет подниматься каждый год в течение следующих 25 лет.
'''
years = int(input('Лет наблюдения: '))
level_rises = 1.6
total_level_rises = 0
print('Year \t Level rises')
print('-----------------------')
for year in range(1, years + 1):
    total_level_rises += level_rises
    print(f'{year:>4} \t {total_level_rises:>8.2f}')
print(f'Через 25 лет уровень поднимется на: {total_level_rises:.2f} см.')
'''
# 10. Рост платы за обучение.
# В некотором университете обучение студента-очника состав­ляет 145 ООО рублей в семестр.
# Было объявлено, что плата за обучение будет повышаться на 3% каждый год в течение следующих 5 лет.
# Напишите программу с циклом, который выводит плановую сумму за обучение в год (за курс)
# в течение следующих 5 лет.
'''
tuition_per_semester = 145000
tuition_per_year = tuition_per_semester * 2
cost_incr = 0.03
print('year \t Плата')
print('--------------------')

for year in range(1, 6):
    print(f'{year} \t {tuition_per_year:>8.2f}')
    tuition_per_year += tuition_per_year * cost_incr
'''
# 11. Потеря массы. Если умеренно активный человек будет сокращать свое потреблениев
# калориях на 500 калорий в день, то, как правило, он может похудеть примерно на 1,5 кг в месяц.
# Напишите программу, которая позволяет пользователю ввести его исход­ную массу и затем
# создает и выводит таблицу, показывающую, каким будет его ожидае­мая масса в конце каждого
# месяца в течение следующих 6 месяцев, если он продолжит придерживаться этой диеты.
'''
body_weight = float(input('Масса тела перед похуданием: '))
weight_loss_month = 1.5
observation_time = 6

print('Month \t Weight')
print('----------------------')

for time in range(0, observation_time + 1):
    print(f'{time} \t {body_weight:>6.2f}')
    body_weight -= 1.5
'''
# 12. Вычисление факториала числа.
# Напишите программу, которая позволяет пользователю ввести неотрицательное целое число,
# а затем применяет цикл для вычисления факториала этого числа и показывает результат.
'''
num = int(input('Enter num integrer: '))
result = 1
for i in range(1, num + 1):
    result *= i
print(result)
'''
# 13. Популяция. Напишите программу, которая предсказывает приблизительный размер
# популяции организмов. Приложение должно использовать текстовые поля, чтобы дать
# пользователю ввести:
# стартовое количество организмов,
# среднесуточное увеличение популяции (как процент) и
# количество дней, которые организмам будет дано на размно­жение.

num_org = int(input('Введите нач. кол-во организмов: '))
growth_num = int(input('Введите проц. роста организмов: '))
days = int(input('Введите кол. дней наблюдения: '))
print('День \t Кол-во')
print('----------------------')

for day in range(0, days + 1):
    print(f'{day}\t{num_org:>8.2f}')
    num_org += num_org * growth_num / 100
