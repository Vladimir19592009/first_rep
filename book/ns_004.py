# Глава 3. (стр. 128) Структуры принятия решений и булевая логика

# Инструкция if (срабатывает когда TRUE)
# исполняет одну или несколько инструкций, только когда булевоe выражение является истинным.
# Вот общий формат инструкции if:

# if условие:
#    инструкция
#    инструкция

# 3.6 Напишите инструкцию if, которая присваивает значение О переменной х,
# если переменная у равна 20.
'''
y = int(input('Введите любое целоечисленное значение: '))
if y == 20:
    x = 0
    print('Условие выполнено - иксу присвоено значение: ', x)
'''
# 3.7 Напишите, инструкцию if, которая присваивает значение 0.2 переменной
# commissionRate (ставка комиссионного вознаграждения), если переменная sales
# (продажи) больше или равна 1О ООО.
'''
sales = int(input('Введите объем продаж: '))
if sales >= 10000:
    commissionRate = 0.2
    print('Ваша ставка комм. вознограждения: ', commissionRate)
'''

# Инструкция if-else
# исполняет один блок инструкций, если ее условие является TRUE, либо другой блок, если ее условие является FALSE.
# общий формат инструкции:
# if условие:
#    инструкция
#    инструкция
# else:
#    инструкция
#    инструкция

# задачка:
# Если сотрудники работают больше 40 часов в неделю, то он им платит в 1.5 раза больше их
# регулярной почасовой оплаты труда в течение всех часов свыше 40. Он попросил вас разра­
# ботать простенькую программу расчета заработной платы, которая вычисляет заработную
# плату до удержаний, включая надбавку за сверхурочную работу. 
'''
BASE_HOURS = 40
up_coeff = 1.5

hours = float(input('Введите кол. отработанных часов: '))
pay_rate = float(input('Введите стваку оплаты труда : '))

if hours > BASE_HOURS:
    overtime_pay = (hours - BASE_HOURS) * pay_rate * up_coeff
    total_pay = BASE_HOURS * pay_rate + overtime_pay
else:
    total_pay = hours * pay_rate

print(f'Зарплата до удержаний: {total_pay:.2f}')
'''

# Инструкция if-elif-else (служит для упощения многоступенчатой структуры if-else).

# для проверки более одного условия, структура принятия решения может быть вложена внутрь другой структуры принятия решения. Обращаем внимание - выражения if, elif и else выровнены, a исполняемые по условию блоки выделены отступом.

# Упражнения по программированию (Глава 3)

# 1. День недели. 
# Напишите программу, которая запрашивает y пользователя число в диапа­ зоне от 1 до 7. Эта программа должна показать соответствующий день недели, где
# 1 - понедельник, 2 - вторник, 3 - среда, 4 - четверг, 5 - пятница, 6 - суббота и 7 - воскресенье. 
# Программа должна вывести сообщение ob ошибке, если пользователь вводит номер, который 
# находится вне диапазона от 1 до 7.
'''
# Запрашиваем ввод числа от 1 до 7  
day_number = int(input("Введите число от 1 до 7: "))  

# Словарь, сопоставляющий числа дням недели  
days_of_week = {  
    1: "Понедельник",  
    2: "Вторник",  
    3: "Среда",  
    4: "Четверг",  
    5: "Пятница",  
    6: "Суббота",  
    7: "Воскресенье"  
}  

# Проверяем, попадает ли число в допустимый диапазон  
if 1 <= day_number <= 7:  
    print(f"День недели: {days_of_week[day_number]}")  
else:  
    print("Ошибка: введите число в диапазоне от 1 до 7.")
'''
# 2. Площади прямоугольников.
# Площадь прямоугольника - это произведение ero длины на ero ширину. Напишите программу, 
# которая запрашивает длину и ширину двух прямо­угольников. Программа должна выводить 
# пользователю сообщение o том, площадь како­го прямоугольника больше, 
#либо сообщать, что они одинаковы.
'''
length1 = float(input("Длина 1-го прямоугольника: "))
width1 = float(input("Ширина 1-го прямоугольника: "))

length2 = float(input("Длина 2-го прямоугольника: "))
width2 = float(input("Ширина 2-го прямоугольника: "))

area_of_rec1 = length1 * width1
area_of_rec2 = length2 * width2

if area_of_rec1 > area_of_rec2:
    print("Площадь 1-го прямоугольника больше: ")
elif area_of_rec2 > area_of_rec1:
    print("Площадь 2-го прямоугольника больше: ")
else:
    print("Площади равны")
'''

# 3. Классификатор возраста. 
# Напишите программу, которая просит пользователя ввести возраст человека. 
# Программа должна определить, к какой категории этот человек при­надлежит: 
# младенец, ребенок, подросток или взрослый, и вывести соответствующее со­общение. 
# Ниже приведены возрастные рекомендации:
# • если возраст 1 год или меньше, то он или она - младенец;
# • если возраст более 1 года, но менее 13 лет, то он или она - ребенок;
# • если возраст не менее 13 лет, но менее 20 лет, то он или она - подросток;
# • если возраст более 20 лет, то он или она - взрослый.
'''
age = int(input("Введите возраст человека: "))

if age <= 1:
    print("Человек - младенец")
elif 1 < age < 13:
    print("Чедовек - ребенок")
elif 13 <= age < 20:
    print("Человек - подросток")
else:
    print("Взрослый")
'''
# 4. Римские цифры. 
# Напишите программу, которая предлагает пользователю ввести число
# в диапазоне от 1 до 10. Программа должна показать для этого числа римскую цифру.
# Если число находится вне диапазона 1-10, то программа должна вывести сообщение об
# ошибке. B табл. 3.8 приведены римские цифры для чисел от 1 до 10.
'''
# Словарь, сопоставляющий числа арабские - римским цифрам:
arabic_to_rom = {
    1: "I",
    2: "II",
    3: "III",
    4: "IV",
    5: "V",
    6: "VI",
    7: "VII",
    8: "VIII",
    9: "IX",
    10: "X"
}
number = int(input("Введите арабское число от 1 до 10: "))

if 1 <= number <= 10:
    print(f'Соответствует римскому: {arabic_to_rom[number]}')
else:
    print("Ошибка: ваше число не в диапазоне 1 - 10.")
'''
# 8. Калькулятор сосисок для пикника. 
# Допустим, что сосиски упакованы в пакеты по 10 штук, a булочки - в пакеты по 8 штук. 
# Напишите программу, которая вычисляет количество упаковок c сосисками и количество 
# упаковок c булочками, необходимых для пикника c минимальными остатками. 
# Программа должна запросить y пользователя коли­чество участников пикника и количество хот-догов, которые будут предложены каждому участнику. 
# Программа должна показать приведенные ниже подробности:

# • минимально необходимое количество упаковок c сосисками;
# • минимально необходимое количество упаковок c булочками;
# • количество оставшихся сосисок;
# • количество оставшихся булочек.
'''
SAUS_PACK = 10
BUN_PACK = 8

num_part = int(input("Кол участников пикника: "))
num_per_sandw = int(input("Кол. бутеров на каждого: "))
# потребуется сендвичей всего:
total_sandw = num_part * num_per_sandw

num_saus_pack = total_sandw // SAUS_PACK
num_bun_pack = total_sandw // BUN_PACK

# кол. сосисок и булочек будет в остатках:
rest_saus_pack = total_sandw % SAUS_PACK
rest_bun_pack = total_sandw % BUN_PACK


if rest_saus_pack > 0:
    print(f"Кол. упаковок сосисок потребуется: {num_saus_pack + 1} шт.")
    print(f"Кол. сосисок достаточное и останется: {(num_saus_pack + 1) * SAUS_PACK - total_sandw} шт.")
else:
    print(f"Кол. упаковок сосисок потребуется: {num_saus_pack} шт.")

if rest_bun_pack > 0:
    print(f"Кол. упаковок булочек потребуется: {num_bun_pack + 1} шт.")
    print(f"Кол. булочек достаточное и останется: {(num_bun_pack + 1) * BUN_PACK - total_sandw} шт.")
else:
    print(f"Кол. упаковок булочек потребуется: {num_bun_pack} шт.")
'''

# 9. Цвета колеса рулетки. 
# Ha колесе рулетки карманы пронумерованы от 0 до 36. Ниже приведены цвета карманов:
# • карман 0 - зеленый;
# • для карманов c 1 по 1 0 карманы c нечетным номером имеют красный цвет, карманы
# c четным номером - черный;
# • для карманов c 11 по 18 карманы c нечетным номером имеют черный цвет, карманы
# c четным номером - красный;
# • для карманов c 19 по 28 карманы c нечетным номером имеют красный цвет, карманы
# c четным номером - черный;
# • для карманов c 29 по 36 карманы c нечетным номером имеют черный цвет, карманы
# c четным номером - красный.
# Напишите программу, которая просит пользователя ввести номер кармана и показывает,
# является ли этот карман зеленым, красным или черным. Программа должна вывести
# сообщение ob ошибке, если пользователь вводит число, которое лежит вне диапазона
# ot 0 ДО 36.
'''
num = int(input("Введите целое натуральной число от 1 до 36: "))

num_range = num % 2

if (1 <= num <= 10) and (num_range > 0):
    print("Красный")
elif (11 <= num <= 18) and (num_range == 0):
    print("Красный")
elif (19 <= num <= 28) and (num_range > 0):
    print("Красный")
elif (29 <= num <= 36) and (num_range == 0):
    print("Красный")
elif num == 0:
    print("Зеленый")
elif num > 36 or num < 0:
    print("Ошибка: введите правильно! ")
else:
    print("Черный")
'''

# 12. Реализация программного обеспечения.
# Компания - разработчик программного обеспечения продает программный пакет, 
# который реализуется в рознице за 99 долла­ров. 
# Скидки за количество предоставляются в соответствии c табл.

# Количество штук Скидка,%
# 10-19            10
# 20-49            20
# 50-99            30
# 100 или больше   40

# Напишите программу, которая просит пользователя ввести количество приобретенных
# пакетов. Программа должна затем показать сумму скидки (если таковая имеется) и 
# общую сумму покупки после вычета скидки.
'''
pak = int(input("Введите кол. проданных пакетов: "))
PROGRAM_PAK = 99
total_pak = pak * PROGRAM_PAK

if 10 <= pak <= 19:
    print(f"3a 10-19 стоимость составит: {total_pak * 0.1:.2f}")
    print(f"3a данный пакет скидка составит: {total_pak - total_pak * 0.1:.2f}")
elif 20 <= pak <= 49:
    print(f"3a 20-49 стоимость составит: {total_pak * 0.2:.2f}")
    print(f"3a данный пакет скидка составит: {total_pak - total_pak * 0.2:.2f}")
elif 50 <= pak <= 99:
    print(f"3a 50-99 стоимость составит: {total_pak * 0.3:.2f}")
    print(f"3a данный пакет скидка составит: {total_pak - total_pak * 0.3:.2f}")
elif pak >= 100:
    print(f"3a >= 100 стоимость составит: {total_pak * 0.4:.2f}")
    print(f"3a данный пакет скидка составит: {total_pak - total_pak * 0.4:.2f}")
else:
    print(f"3a пакет до 10 шт. стоимость составит: {total_pak:.2f} скидка не предусмотрена")
'''

# 16. Дни в феврале. 
# Февраль обычно имеет 28 дней. Ho в високосный год в феврале 29 дней.
# Напишите программу, которая просит пользователя ввести год. Затем она должна 
# показать количество дней в феврале в этом году. Для определения високосных лет 
# используйте следующие критерии.
# • Определить, делится ли год на 100. Если да, то этот год високосный тогда и только
# тогда, если он также делится на 400. Например, 2000 является високосным годом, a 2100 нет.
# • Если год не делится на 100, то этот год високосный тогда и только тогда, если он де­лится на 4. 
# Например, 2008 является високосным годом, но 2009 нет.

year = int(input("Введите год для проверки: "))
test1 = year % 100
test2 = year % 400
test3 = year % 4

if test1 == 0 and test2 == 0:
    print("Этот год високосный")
elif test2 > 0 and test3 == 0:
    print("Этот год високосный")
else:
    print("He високосный")
