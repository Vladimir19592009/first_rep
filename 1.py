# СЛОВАРИ

# Словарь - это объект-контейнер, который хранит коллекцию данных. Каждый элемент в словаре имеет две части: ключ и значение. Ключ используют, чтобы установить место­ нахождение конкретного значения.

# Создание словаря

# Словарь создается путем заключения его элементов в фигурные скобки.
# Элемент состо­ит из ключа, затем двоеточия, после которого идет значение.
# Элементы словаря отделяются друг от друга запятыми.

# phonebook = {'Крис':'555-1111', 'Кэти':'555-2222', 'Джоанна':'555-3333'}

# Значения в словаре могут быть объектами любого типа, но ключи должны быть немутируемыми объектами. Например, ключами могут быть строковые значения, целые числа, значения с плавающей точ­кой или кортежи. Ключами не могут быть списки либо мутируемые объекты других типов.

# Получение значения из словаря:

# Для того чтобы получить значение из словаря, просто пишут выражение в
# приведенном ниже общем формате:

# имя_словаря [ключ]

# Если ключь есть, выражение возвращает ЗНАЧЕНИЕ, если кюча нет возвращает ИСКЛЮЧЕНИЕ (KeyError).


# in и not in ПРИМЕНЕНИЕ операторов для проверки на наличие и отсутствие значения в словаре.

# if ключ in имя_словаря:
#    print(имя_словаря[ключ])
# значение

# if ключ not in имя_словаря:
#    print('Элемент отсутствует')

'''
phonebook = {'Крис':'555-1111', 'Кэти':'555-2222', 'Джоанна':'555-3333'}
if 'Крис'in phonebook:
    print(phonebook['Крис'])
# 555-1111
'''
#  проверить отсутствие ключа можно,применив оператор not in:
'''
phonebook = {'Кэти':'555-2222', 'Джоанна':'555-3333'}
if 'Крис'not in phonebook:
    print('Крис не найден')
# Крис не найден
'''

# Добавление элементов в существующий словарь:

# имя_словаря[ключ] = значение

# если ключ уже существует в словаре, то его значение будет заменено на новое. Иначе новая пара ключ:значение будут добавлены в словарь.

# Удаление элементов
# Существующую пару "ключ:значение" можно из словаря удалить при помощи инструкции del. Вот общий формат:

# del имя_словаря[ключ]   # - удаляет пару ключ:значение. Если ключ отсутствует - ИСКЛЮЧЕНИЕ (KeyError).

# чтобы не нарваться на исключение делайте предварительную проверку на наличие ключа:

# if ключ in имя_словаря:
#   del имя_словаря[ключ]

'''
phonebook = {'Крис':'555-1111', 'Кэти':'555-2222', 'Джоанна':'555-3333'}
del phonebook['Крис']
print(phonebook)
# {'Кэти': '555-2222', 'Джоанна': '555-3333'}
'''
# Получение количества элементов в словаре:
# Для того чтобы получить количество элементов в словаре, можно применить
# встроенную функцию len:
'''
phonebook = {'Крис':'555-1111', 'Кэти':'555-2222', 'Джоанна':'555-3333'}
num_items = len(phonebook)
print(num_items)
# 3
'''
# Смешивание типов данных в словаре
# Как уже упоминалось ранее, ключи в словаре должны быть немутируемыми объектами,
# однако связанные с ними значения могут быть объектами любого типа.
# Например списками:
# В этом сеансе мы создаем словарь, в котором ключами
# являются имена студентов, а зна­чениями - списки экзаменационных оценок.
'''
test_scores = {'Kaila':[88, 92, 100],
               'Luis':[95, 74, 91],
               'Sofi':[72, 91, 88],
               'Itan':[70, 75, 83]}
print(test_scores)
# {'Kaila': [88, 92, 100], 'Luis': [95, 74, 91], 'Sofi': [72, 91, 88], 'Itan': [70, 75, 83]}
print(test_scores['Sofi'])
# [72, 91, 88]
kaila_scores = test_scores['Kaila'] # Вывод через переменную
print(kaila_scores)
# [88, 92, 100]
'''

# Создание пустого словаря

# Иногда требуется создать пустой словарь и добавлять в него элементы по мере
# выполнения программы.
# Для создания пустого словаря используются пустые фигурные скобки:

# переменная = {}
# или
# переменная = dict()

# ОПЕРАТОРЫ:

'''
# 1. Индексирование: Позволяет получать значение по ключу:
my_dict = {'a': 1, 'b': 2}
print(my_dict['a'])  
# Вывод: 1. Если ключа нет, будет вызвано исключение KeyError.

# 2. Метод .get(): Позволяет получать значение по ключу. При отсутствии ключа возвращает значение по умолчанию ('default_value').
value = my_dict.get('key', 'default_value')
print(value)
# Возвращает 'default_value'  

# 3. Оператор in: Проверяет наличие ключа в словаре.
if 'a' in my_dict:  
    print('Ключ "a" присутствует')  
# Вывод: Ключ "a" присутствует  

# Методы:

# .keys(): Возвращает все ключи словаря в виде кopтeжa в котором находится список
my_dict = {'a': 1, 'b': 2, 'c':3, 'd': 4}
key = my_dict.keys()
print(key)
# dict_keys(['a', 'b', 'c', 'd'])

# .values(): Возвращает все значения (val) из словаря (без ключей) в виде списка кортежа.
my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
val = my_dict.values()
print(val)
# dict_values([1, 2, 3, 4])

# .items(): Возвращает все ключи и значения в виде списка кортежей.
my_dict = {'a': 1, 'b': 2, 'c':3, 'd': 4}
item = my_dict.items()
print(item)
# dict_items([('a', 1), ('b', 2), ('c', 3), ('d', 4)])

# .update(): Обновляет словарь, добавляя ключи из другого словаря или итерируемого объекта.
my_dict.update({'b': 3, 'c': 4})
print(my_dict)
# Теперь my_dict будет {'a': 1, 'b': 3, 'c': 4}  

# .pop(): - возвращает ЗНАЧЕНИЕ указанного ключа и удаляет эту пару ключ:ЗНАЧЕНИЕ из словаря. Если ключ не найден, то возвращает "Значение по умолчанию" (например: "Запись не найдена") 
my_dict = {'a': 1, 'b': 2}
c = my_dict.pop('a', 'Default value')
print(c)
# 1
my_dict = {'a': 1, 'b': 2}
c = my_dict.pop('z', 'Default value')
print(c)
# Default value

# .popitem(): Выполняет два действия: удаляет пару ключ:значение (произвольно выбранную) и возвращает эту пару в виде кортежа. 
my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
z = my_dict.popitem()
print(z)
# ('d', 4) 

# .clear(): Удаляет все элементы из словаря.
my_dict.clear()  
# Теперь my_dict пустой
'''

# Цикл for для словарей:

# for переменная in имя_словаря:
#    инструкция
#    инструкция

# при каждой итерации переменной присваивается ключ.

# Пример:
'''
test_scores = {'Kaila':[88, 92, 100],
               'Luis':[95, 74, 91],
               'Sofi':[72, 91, 88],
               'Itan':[70, 75, 83]}
for i in test_scores:
    print(i)
for i in test_scores:
    print(i, test_scores[i])
# Kaila
# Luis
# Sofi
# Itan
# Kaila [88, 92, 100]
# Luis [95, 74, 91]
# Sofi [72, 91, 88]
# Itan [70, 75, 83]
'''
# ВКЛЮЧЕНИЕ В СЛОВАРЬ -
# - это выражение,которое читает последовательность вх. элементов для создания словоря.

# из списка: numbers = [1, 2, 3, 4]

# допустим хотим использовать элементы списка в качестве ключей, а применяя к.л. выражение к этим же элементам запмсывать результат в качестве ЗНАЧЕНИЙ: в ощем виде:
'''
#  имя_cлoвapя = {переменная:выражение(переменная) for переменная in numbers}
'''
# -где переменная(прикаждой итерации) принимает значения из списка numbers.

# СОЗДАНИЕ КОПИИ СУЩЕСТВУЮЩЕГО СЛОВАРЯ:
'''
# name_dic = {key1:val1, key2:vai2, key3:val3, ...}
# name_dic_copy = {k:v for k, v in name_dic.items()}
#   print(name_dic_copy)
'''
# {key1:val1, key2:vai2, key3:val3, ...}

# if c операциями ВКЛЮЧЕНИЯ В СЛОВАРЬ:
# необходим когда в копию (новый словарь) требуется внести только некоторые пары ключ:значение соблюдая определённые условия (if) - (если). Общий формат выглядит:
'''
# name_dic = {key1:val1, key2:vai2, key3:val3, ...}
# name_dic_copy = {k:v for k, v in name_dic.items() if v (или k) (булево выражение)}
#   print(name_dic_copy)
# {..., ...}
'''

# -----------------------------------------------------------------------------
# B Python можно создать усечённую копию словаря по ключам с помощью метода включения в словарь. Это можно сделать с помощью генератора словарей. Вот пример, как это можно реализовать:
'''
# Исходный словарь  
original_dict = {  
    'a': 1,  
    'b': 2,  
    'c': 3,  
    'd': 4  
}  

# Ключи, которые вы хотите включить в новую копию  
keys_to_include = ['a', 'c']  

# Создание усечённой копии словаря  
filtered_dict = {key: original_dict[key] for key in keys_to_include if key in original_dict}  

print(filtered_dict)  # Вывод: {'a': 1, 'c': 3}  
'''
# В этом примере filtered_dict будет содержать только те ключи, которые указаны в keys_to_include. Если нужные ключи отсутствуют в исходном словаре, они просто игнорируются.

# --------------------------------------------------------------------------------

# Использование условий if с операциями включения в словарь:
# Иногда во время обработки словаря требуется выбирать только те или иные элементы.
'''
populations = {'Нью-Йорк': 8398748, 'Лос-Анджелес': 3990456,
               'Чикаго': 2705994, 'Хьюстон': 2325502,
               'Феникс': 1660272, 'Филадельфия': 1584138}
#  c помощью обычного цикла for:
largest = {}
for k, v in populations.items():
    if v > 2000000:
        largest[k] = v
print(largest)
# результат: 
# {'Нью-Йорк': 8398748, 'Лос-Анджелес': 3990456, 'Чикаго': 2705994, 'Хьюстон': 2325502}
'''
# Этот тип операции также можно выполнить путем добавления условия if во включение в словарь. Условие if действует как фильтр, позволяя выбирать те или иные элементы из входной по­ следовательности.
# Вот общий формат:

# {выражение_результата выражение_итерации условие_if)
'''
largest = {k:v for k,v in populations.items() if v > 2000000}
print(largest)
# результат тот же: 
# {'Нью-Йорк': 8398748, 'Лос-Анджелес': 3990456, 'Чикаго': 2705994, 'Хьюстон': 2325502}
'''

# Контрольная точка:
'''
stuff = {1: 'aaa', 2: 'bbb', 3: 'ввв'}
print(stuff[3])
# ввв
'''
'''
inventory = {2: '254', 3: '546', 4: "235"}
del inventory[4]
print(inventory)
# {2: '254', 3: '546'}
'''
'''
stuff = {1:'aaa', 2:'bbb', 3:'ввв'}
print(len(stuff))
# 3
for k in stuff:
    print(k)
# 1
# 2
# 3
'''
# 9.14
# Напишите инструкцию с использованием включения в словарь для создания словаря, в котором каждый элемент содержит имя из списка names в качестве ключа и длину это­го имени в качестве значения:
'''
names = [ 'Крис', 'Кэти', 'Джоанна', 'Курт']
result = {i:len(i) for i in names}
print(result)
# {'Крис': 4, 'Кэти': 4, 'Джоанна': 7, 'Курт': 4}
'''
# 9.15
# Напишите инструкцию для словаря phonebook с использованием включения в словарь для создания второго словаря, содержащего элементы телефонной книги phonebook, которые имеют значения, начинающееся с '919 '.
'''
phonebook = {'Крис': '919-555-1111', 'Кэти': '828-555-2222',
             'Джоанна': '704-555-3333', 'Курт': '919-555-3333'}

phonebook_copy = {k:v for k, v in phonebook.items()
                  if v.startswith('919')}
print(phonebook_copy)
# {'Крис': '919-555-1111', 'Курт': '919-555-3333'}
'''
