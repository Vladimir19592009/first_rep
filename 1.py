# СЛОВАРИ

# Словарь - это объект-контейнер, который хранит коллекцию данных. Каждый элемент
# в словаре имеет две части: ключ и значение. Ключ используют, чтобы установить
# место­ нахождение конкретного значения.

# Создание словаря

# Словарь создается путем заключения его элементов в фигурные скобки.
# Элемент состо­ит из ключа, затем двоеточия, после которого идет значение.
# Элементы словаря отделяются друг от друга запятыми.

# phonebook = {'Крис':'555-1111', 'Кэти':'555-2222', 'Джоанна':'555-3333'}

# Значения в словаре могут быть объектами любого типа, но ключи должны быть
# немутируемыми объектами. Например, ключами могут быть строковые значения,
# целые числа, значения с плавающей точ­кой или кортежи.
# Ключами не могут быть списки либо мутируемые объекты других типов.

# Получение значения из словаря:

# Для того чтобы получить значение из словаря, просто пишут выражение в
# приведенном ниже общем формате:

# имя_словаря [ключ]
'''
phonebook = {'Крис':'555-1111', 'Кэти':'555-2222', 'Джоанна':'555-3333'}
if 'Крис'in phonebook:
    print(phonebook['Крис'])
# 555-1111
'''
#  проверить отсутствие ключа можно,применив оператор not in:
'''
phonebook = {'Кэти':'555-2222', 'Джоанна':'555-3333'}
if 'Крис'not in phonebook:
    print('Крис не найден')
# Крис не найден
'''
# Удаление элементов
# Существующую пару "ключ : значение" можно из словаря удалить при помощи
# инструкции del. Вот общий формат:

# del имя_словаря[ключ]
'''
phonebook = {'Крис':'555-1111', 'Кэти':'555-2222', 'Джоанна':'555-3333'}
del phonebook['Крис']
print(phonebook)
# {'Кэти': '555-2222', 'Джоанна': '555-3333'}
'''
# Получение количества элементов в словаре:
# Для того чтобы получить количество элементов в словаре, можно применить
# встроенную функцию len:
'''
phonebook = {'Крис':'555-1111', 'Кэти':'555-2222', 'Джоанна':'555-3333'}
num_items = len(phonebook)
print(num_items)
# 3
'''
# Смешивание типов данных в словаре
# Как уже упоминалось ранее, ключи в словаре должны быть немутируемыми объектами,
# однако связанные с ними значения могут быть объектами любого типа.
# Например списками:
# В этом сеансе мы создаем словарь, в котором ключами
# являются имена студентов, а зна­чениями - списки экзаменационных оценок.
'''
test_scores = {'Kaila':[88, 92, 100],
               'Luis':[95, 74, 91],
               'Sofi':[72, 91, 88],
               'Itan':[70, 75, 83]}
print(test_scores)
# {'Kaila': [88, 92, 100], 'Luis': [95, 74, 91], 'Sofi': [72, 91, 88], 'Itan': [70, 75, 83]}
print(test_scores['Sofi'])
# [72, 91, 88]
kaila_scores = test_scores['Kaila'] # Вывод через переменную
print(kaila_scores)
# [88, 92, 100]
'''

# Создание пустого словаря

# Иногда требуется создать пустой словарь и добавлять в него элементы по мере
# выполнения программы.
# Для создания пустого словаря используются пустые фигурные скобки:

# переменная = {}
# или
# переменная = dict()

# ОПЕРАТОРЫ:

'''
# 1. Индексирование: Позволяет получать значение по ключу:
my_dict = {'a': 1, 'b': 2}
print(my_dict['a'])  
# Вывод: 1. Если ключа нет, будет вызвано исключение KeyError.

# 2. Метод .get(): Позволяет получать значение по ключу, возвращая None 
# при отсутствии ключа (или заданное значение).
value = my_dict.get('c', 'default_value')
print(value)
# Возвращает 'default_value'  

# 3. Оператор in: Проверяет наличие ключа в словаре.
if 'a' in my_dict:  
    print('Ключ "a" присутствует')  
# Вывод: Ключ "a" присутствует  

# Методы:

# .keys(): Возвращает все ключи в словаре в виде последовательности кортежей.
keys = my_dict.keys()
print(keys)
# dict_keys(['a', 'b'])  

# .values(): Возвращает все значения из словаря в виде последовательности кортежей.
values = my_dict.values()
print(values)
# dict_values([1, 2])  

# .items(): Возвращает все ключи в словаре и связанные c ними значения в виде списка кортежей.
items = my_dict.items()
print(items)
# dict_items([('a', 1), ('b', 2)])  

# .update(): Обновляет словарь, добавляя ключи из другого словаря или итерируемого объекта.
my_dict.update({'b': 3, 'c': 4})
print(my_dict)
# Теперь my_dict будет {'a': 1, 'b': 3, 'c': 4}  

# .pop(): Удаляет значение по указанному ключу. 
my_dict.pop('a')
print(my_dict)
# Удаляет 'a' и возвращает {'b': 2}  

# .popitem(): Возвращает в виде кортежа пару "ключ: значение". 
# Этот метод также удаляет последнюю пару "ключ : значение" из словаря.
my_dict.popitem()  
# {'a': 1}

# .clear(): Удаляет все элементы из словаря.
my_dict.clear()  
# Теперь my_dict пустой
'''

# Применение цикла for для последовательного обхода словаря:

# for переменная in словарь:
#    инструкция
#    инструкция

# Пример:
'''
test_scores = {'Kaila':[88, 92, 100],
               'Luis':[95, 74, 91],
               'Sofi':[72, 91, 88],
               'Itan':[70, 75, 83]}
for i in test_scores:
    print(i)
for i in test_scores:
    print(i, test_scores[i])
# Kaila
# Luis
# Sofi
# Itan
# Kaila [88, 92, 100]
# Luis [95, 74, 91]
# Sofi [72, 91, 88]
# Itan [70, 75, 83]
'''
# -----------------------------------------------------------------------------
'''
# Создаем пустой словарь  
dictionary = {}  

def add_translation(english_word, russian_translation):  
    """Добавляет перевод в словарь."""  
    dictionary[english_word] = russian_translation  
    print(f'Перевод добавлен: "{english_word}" -> "{russian_translation}"')  

def edit_translation(english_word, new_translation):  
    """Редактирует перевод в словаре."""  
    if english_word in dictionary:  
        dictionary[english_word] = new_translation  
        print(f'Перевод обновлен: "{english_word}" -> "{new_translation}"')  
    else:  
        print("Слово не найдено в словаре.")  

def display_dictionary():  
    """Выводит все слова и переводы из словаря."""  
    if not dictionary:  
        print("Словарь пуст.")  
    else:  
        for word, translation in dictionary.items():  
            print(f'"{word}" -> "{translation}"')  

def main():  
    while True:  
        print("\nMeню:")  
        print("1. Добавить перевод")  
        print("2. Редактировать перевод")  
        print("3. Показать словарь")  
        print("4. Выйти")  
        
        choice = input("Выберите действие (1-4): ")  
        
        if choice == '1':  
            english_word = input("Введите английское слово/выражение: ")  
            russian_translation = input("Введите перевод: ")  
            add_translation(english_word, russian_translation)  
        elif choice == '2':  
            english_word = input("Введите английское слово для редактирования: ")  
            new_translation = input("Введите новый перевод: ")  
            edit_translation(english_word, new_translation)  
        elif choice == '3':  
            display_dictionary()  
        elif choice == '4':  
            print("Выход из программы.")  
            break  
        else:  
            print("Неверный выбор. Пожалуйста, попробуйте снова.")  

if __name__ == "__main__":  
    main()
'''
# --------------------------------------------------------------------------------

# Использование условий if с операциями включения в словарь:
# Иногда во время обработки словаря требуется выбирать только те или иные элементы.
'''
populations = {'Нью-Йорк': 8398748, 'Лос-Анджелес': 3990456,
               'Чикаго': 2705994, 'Хьюстон': 2325502,
               'Феникс': 1660272, 'Филадельфия': 1584138}
#  c помощью обычного цикла for:
largest = {}
for k, v in populations.items():
    if v > 2000000:
        largest[k] = v
print(largest)
# результат: 
# {'Нью-Йорк': 8398748, 'Лос-Анджелес': 3990456, 'Чикаго': 2705994, 'Хьюстон': 2325502}
'''
# Этот тип операции также можно выполнить путем добавления условия if во включение в словарь. Условие if действует как фильтр, позволяя выбирать те или иные элементы из входной по­ следовательности.
# Вот общий формат:

# {выражение_результата выражение_итерации условие_if)
'''
largest = {k:v for k,v in populations.items() if v > 2000000}
print(largest)
# результат тот же: 
# {'Нью-Йорк': 8398748, 'Лос-Анджелес': 3990456, 'Чикаго': 2705994, 'Хьюстон': 2325502}
'''

# Контрольная точка:
'''
stuff = {1: 'aaa', 2: 'bbb', 3: 'ввв'}
print(stuff[3])
# ввв
'''
'''
inventory = {2: '254', 3: '546', 4: "235"}
del inventory[4]
print(inventory)
# {2: '254', 3: '546'}
'''
'''
stuff = {1:'aaa', 2:'bbb', 3:'ввв'}
print(len(stuff))
# 3
for k in stuff:
    print(k)
# 1
# 2
# 3
'''
# 9.14
# Напишите инструкцию с использованием включения в словарь для создания словаря,
# в котором каждый элемент содержит имя из списка names в качестве ключа и длину
# это­го имени в качестве значения:
'''
names = [ 'Крис', 'Кэти', 'Джоанна', 'Курт']
result = {i:len(i) for i in names}
print(result)
# {'Крис': 4, 'Кэти': 4, 'Джоанна': 7, 'Курт': 4}
'''
# 9.15
# Напишите инструкцию для словаря phonebook с использованием включения в словарь
# для создания второго словаря, содержащего элементы телефонной книги phonebook,
# которые имеют значения, начинающееся с '919 '.
'''
phonebook = {'Крис': '919-555-1111', 'Кэти': '828-555-2222',
             'Джоанна': '704-555-3333', 'Курт': '919-555-3333'}

phonebook_copy = {k:v for k, v in phonebook.items()
                  if v.startswith('919')}
print(phonebook_copy)
# {'Крис': '919-555-1111', 'Курт': '919-555-3333'}
'''
