# Упражнение 2. Приветствие

# Напишите программу, запрашивающую у пользователя его имя. В ответ на ввод на экране должно появиться приветствие с обращением по имени, введенному с клавиатуры ранее.

# name = input("Yuor name? ")

# print(f"Hello, {name}!")
# Hello, Vladimir!


# Упражнение 3. Площадь комнаты

# Напишите программу, запрашивающую у пользователя длину и ширину комнаты. После ввода значений должен быть произведен расчет площади комнаты и выведен на экран. Длина и ширина комнаты должны вводиться в формате числа с плавающей запятой. Дополните ввод и вывод единицами измерения, принятыми в вашей стране. Это могут быть футы или метры.

# length = float(input("Enter length of room "))
# width = float(input("Enter width of room "))
# area_room = length * width
# print(f"Area room is {area_room} square meters ")
# Enter length of room 6
# Enter width of room 4
# Area room is 24.0 square meters


# Упражнение 4. Площадь садового участка

# Создайте программу, запрашивающую у пользователя длину и ширину садового участка в футах. Выведите на экран площадь участка в акрах: (Подсказка: В одном акре содержится 43 560 квадратных футов)

# gp_length = float(input("Enter garden plot length "))
# gp_width = float(input("Enter garden plot width "))

# gp_area = (gp_length * gp_width) / 43560
# print(f"Garden plot square is {gp_area:^10,.2f}")
# Enter garden plot length 450
# Enter garden plot width 350
# Garden plot square is    3.62


# Упражнение 5. Сдаем бутылки

# Во многих странах в стоимость стеклотары закладывается определенный депозит, чтобы стимулировать покупателей напитков сдавать пустые бутылки. Допустим, бутылки объемом 1 литр и меньше стоят $0,10, а бутылки большего объема – $0,25.
# Напишите программу, запрашивающую у пользователя количество бутылок каждого размера. На экране должна отобразиться сумма, которую можно выручить, если сдать всю имеющуюся посуду. Отформатируйте вывод так, чтобы сумма включала два знака после запятой и дополнялась слева символом доллара.

# num_small_bottle = int(input("Enter the number of small bottles "))
# num_large_bottle = int(input("Enter the number of large bottles "))
# cost_of_sm = 0.1
# cost_of_lb = 0.25

# total_sales = num_small_bottle * cost_of_sm + num_large_bottle * cost_of_lb
# print(f"Total revenue will be: ${total_sales:.2f}")
# Enter the number of small bottles 50
# Enter the number of large bottles 60
# Total revenue will be: $20.00


# Упражнение 6. Налоги и чаевые

# Программа, которую вы напишете, должна начинаться с запроса у пользователя суммы заказа в ресторане. После этого должен быть произведен расчет налога и чаевых официанту. Вы можете использовать принятую в вашем регионе налоговую ставку для подсчета суммы сборов. В качестве чаевых мы оставим 18 % от стоимости заказа без учета налога. На выходе программа должна отобразить отдельно налог, сумму чаевых и итог, включая обе составляющие. Форматируйте вывод таким образом, чтобы все числа отображались с двумя знаками после запятой.

# SALES_TAX = 0.05
# TIP = 0.18
# restaurant_order = float(input("How much (number) was the order in the restaurant? "))

# sum_tax = SALES_TAX * restaurant_order
# sum_tip = TIP * restaurant_order
# total_sum = restaurant_order + sum_tax + sum_tip

# print(f" Налог составит: ${sum_tax:.2f} \n Чаевые: \t ${sum_tip:.2f} \n Полные затраты: ${total_sum:.2f}")
# How much (number) was the order in the restaurant? 250
#  Налог составит: $12.50
#  Чаевые:         $45.00
#  Полные затраты: $307.50


# Упражнение 7. Сумма первых n положительных чисел

# Напишите программу, запрашивающую у пользователя число и подсчитывающую сумму натуральных положительных чисел от 1 до введенного пользователем значения. Сумма n положительных чисел может быть рассчитана по формуле:     sum = n*(n+1)/2

# your_num = int(input("Enter natural positive namber: "))

# sum_namber = your_num * (your_num +1) / 2
# print(sum_namber)
# Enter natural positive namber: 55
# 1540.0


# Упражнение 8. Сувениры и безделушки

# Интернет-магазин занимается продажей различных сувениров и безделушек. Каждый сувенир весит 75 г, а безделушка – 112 г. Напишите программу, запрашивающую у пользователя количество тех и других покупок,после чего выведите на экран общий вес посылки.

# souvenir = 0.075
# knickknack = 0.112
# count_souv = int(input("Enter number of souvenirs: "))
# count_knick = int(input("Enter number of knickknacks: "))

# total_weight = count_souv * souvenir + count_knick * knickknack
# print(f"Общий вес посылки: {total_weight:.3f} кг")
# Enter number of souvenirs: 23
# Enter number of knickknacks: 16
# Общий вес посылки: 3.517 кг


# Упражнение 9. Сложные проценты

# Представьте, что вы открыли в банке сберегательный счет под 4 % годовых. Проценты банк рассчитывает в конце года и добавляет к сумме счета. Напишите программу, которая запрашивает у пользователя сумму первоначального депозита, после чего рассчитывает и выводит на экран сумму на счету в конце первого, второго и третьего годов. Все суммы должны быть округлены до двух знаков после запятой.

# your_deposit = int(input("Какую сумму хотите положить на депозит? "))
# deposit_interest = 0.04

# amount_acc1 = your_deposit + your_deposit * deposit_interest
# print(f"После первого года сумма на счету: ${amount_acc1:.2f}")
# # После первого года сумма на счету: $4160000.00

# amount_acc2 = amount_acc1 + amount_acc1 * deposit_interest
# print(f"После второго года сумма на счету: ${amount_acc2:.2f}")
# # После второго года сумма на счету: $4326400.00

# amount_acc3 = amount_acc2 + amount_acc2 * deposit_interest
# print(f"После третьего года сумма на счету: ${amount_acc3:.2f}")
# # После третьего года сумма на счету: $4499456.00


# Упражнение 11. Потребление топлива

# В США потребление автомобильного топлива исчисляется в милях на галлон (miles-per-gallon – MPG). В то же время в Канаде этот показатель обычно выражается в литрах на 100 км (liters-per-hundred kilometers –L/100 km). Используйте свои исследовательские способности, чтобы определить формулу перевода первых единиц исчисления в последние. После этого напишите программу, запрашивающую у пользователя показатель потребления топлива автомобилем в американских единицах и выводящую его на экран в канадских единицах.
# 1 галон = 3,785 литра
# 1 миля = 1,60934 км


# dist_miles = float(input("Enter distance travelled in miles "))
# fuel_halons = float(input("Enter fuel consumption in halons "))
# MPG = dist_miles / fuel_halons

# l_per_100km = (100 * 3.785)/ (MPG * 1.60934)
# print(f"Fuel consumption in liters per-hundred kilometers {l_per_100km:.2f} L/100km")
# Enter distance travelled in miles 100
# Enter fuel consumption in halons 4
# Fuel consumption in liters per-hundred kilometers 9.41 L/100km


# Упражнение 13. Размен

# Представьте, что вы пишете программное обеспечение для автоматической кассы в магазине самообслуживания. Одной из функций, заложенных в кассу, должен быть расчет сдачи в случае оплаты покупателемналичными. Напишите программу, которая будет запрашивать у пользователя сумму сдачи в центах. После этого она должна рассчитать и вывести на экран, сколько и каких монет потребуется для выдачи указанной суммы, при условии что должно быть задействовано минимально возможное количест­во монет. Допустим, у нас есть в распоряжении монеты достоинством в 1, 5, 10, 25 центов, а также в 1 (loonie) и 2 (toonie) канадских доллара.

# CENTS_PER_TOONIE = 200
# CENTS_PER_LOONIE = 100
# CENTS_PER_QUARTER = 25
# CENTS_PER_DIME = 10
# CENTS_PER_NICKEL = 5
# CENT_ONE = 1

# cents = int(input("Enter amount in cents: "))

# # Определим количество двухдолларовых монет путем деления суммы на 200. Затем вычислим оставшуюся сумму для размена, рассчитав остаток от деления.

# print(" ", cents // CENTS_PER_TOONIE, "двухдолларовых монет")
# cents = cents % CENTS_PER_TOONIE

# # Повторяем эти действия для остальных монет

# print(" ", cents // CENTS_PER_LOONIE, "долларовых монет")
# cents = cents % CENTS_PER_LOONIE

# print(" ", cents // CENTS_PER_QUARTER, "25 центовых монет")
# cents = cents % CENTS_PER_QUARTER

# print(" ", cents // CENTS_PER_DIME, "10 центовых монет")
# cents = cents % CENTS_PER_QUARTER

# print(" ", cents // CENTS_PER_NICKEL, "5 центовых монет")
# cents = cents % CENTS_PER_NICKEL

# print(" ", cents, "центов")

# РЕЗУЛТАТ:
# Enter amount in cents: 567
#   2 двухдолларовых монет
#   1 долларовых монет
#   2 25 центовых монет
#   1 10 центовых монет
#   3 5 центовых монет
#   2 центов


# Упражнение 14. Рост

# Многие люди на планете привыкли рассчитывать рост человека в футах и дюймах, даже если в их стране принята метрическая система.
# Напишите программу, которая будет запрашивать у пользователя количество футов, а затем дюймов в его росте. После этого она должна пересчитать рост в сантиметры и вывести его на экран.      (  Подсказка. Один фут равен 12 дюймам, а один дюйм – 2,54 см.  )

# IN_PER_FIT = 12
# CM_PER_IN = 2.54

# print("Введите рост:")

# feet = int(input("Количество фунтов: "))
# inches = int(input("Количество дюймов: "))

# cm = (inches + feet * IN_PER_FIT) * CM_PER_IN
# print(f"Рост этого человека {cm:.2f}")
# # Количество фунтов: 6
# # Количество дюймов: 4
# # Рост этого человека 193.04


# Упражнение 15. Расстояние

# Для этого упражнения вам необходимо будет написать программу, которая будет запрашивать у пользователя расстояние в футах. После этого она должна будет пересчитать это число в дюймы, ярды и мили и вывес­ти на экран. Коэффициенты для пересчета единиц вы без труда найдете в интернете.
# (Один фут = 12 дюймам, один ярд = 36 дюймов, одна миля = 5280 футов)

# IN_PER_FIT = 12
# FIT_PER_YARD = 3
# MIL_PER_FIT = 5280

# distance = int(input("Укажите расстояние в футах: "))

# dist_in = distance * IN_PER_FIT
# dist_yard = distance / FIT_PER_YARD
# dist_mil = distance / MIL_PER_FIT

# print(
#     f" в дюймах: {dist_in:.2f} \n в ярдах: {dist_yard:.2f} \n в милях: {dist_mil:.2f}")
# # Укажите расстояние в футах: 7560
# #  в дюймах: 90720.00
# #  в ярдах: 2520.00
# #  в милях: 1.43


# Упражнение 17. Теплоемкость

# Количество энергии, требуемое для повышения температуры одного грамма материала на один градус Цельсия, называется удельной теплоемкостью материала и обозначается буквой C. Общее количество энергии (q), требуемое для повышения температуры m граммов материала на ΔT градусов Цельсия, может быть рассчитано по формуле:  q = mCΔT.

# Напишите программу, запрашивающую у пользователя массу воды и требуемую разницу температур. На выходе вы должны получить количество энергии, которое необходимо добавить или отнять для достижения желаемого температурного изменения.
# Подсказка. Удельная теплоемкость воды равна 4,186 Дж/гС. Поскольку вода обладает г·С плотностью 1 грамм на миллилитр, в данном упражнении можно взаимозаменять граммы и миллилитры.

# C = 4.186

# m = int(input("Укажите количетво воды в граммах: "))
# t = int(input("Укажите на сколько градусов хотите подогреть воду: "))

# q = m * C * t
# print(f"Количество энергии в Дж потребуется: {q:.2f}")

# Расширьте свою программу таким образом, чтобы выводилась также стоимость сопутствующего нагрева воды. Обычно принято измерять элект­ричество в кВт·ч, а не в джоулях. Для данного примера предположим, что электричество обходится нам в 8,9 цента за один кВт·ч. Используйте свою программу для подсчета стоимости нагрева одной чашки кофе.  ( 1квч=3 600 000 Дж)

# tarif = 8.9
# KVCH = 3600000

# # стоимость нагрева объема воды указанного пользователем:
# pay = q / KVCH * tarif
# print(f"Нагрев воды обойдется в ${pay:.2f}")

# kofe = ((200*C*85)/KVCH)*tarif
# print(f"Приготовление чашки кофе: ${kofe:.2f}")
# # Укажите количетво воды в граммах: 100000
# # Укажите на сколько градусов хотите подогреть воду: 45
# # Количество энергии в Дж потребуется: 18837000.00
# # Нагрев воды обойдется в $46.57
# # Приготовление чашки кофе: $0.18


# Упражнение 18. Объем цилиндра

# Объем цилиндра может быть рассчитан путем умножения площади круга, лежащего в его основе, на высоту. Напишите программу, в которой пользователь будет задавать радиус цилиндра и его высоту, а в ответ получать его объем, округленный до одного знака после запятой.

# radius = float(input("Пусть радиус цилиндра составит: "))
# height = float(input("Пусть высота цилиндра составит: "))

# v = 3.14 * radius * radius * height
# print(f"Объем цилиндра составит: {v:.2f}")
# # Пусть радиус цилиндра составит: 10
# # Пусть высота цилиндра составит: 20
# # Объем цилиндра составит: 6280.00


# Упражнение 19. Свободное падение

# Напишите программу для расчета скорости объекта во время его соприкосновения с землей. Пользователь должен задать высоту в метрах, с которой объект будет отпущен. Поскольку объекту не будет придаваться ускорение, примем его начальную скорость за 0 м/с. Предположим, что ускорение свободного падения равно 9,8 м/с2. При известных начальной скорости (v), ускорении (a) и дистанции (d) можно вычислить скоростьпри соприкосновении объекта с землей по формуле:


# init_fall = 0

# a = 9.8
# d = float(input("Преедмет находится на высоте: "))

# rate_of_fall = (init_fall*init_fall + 2*a*d) ** 0.5
# print(f"Скорость сопркосновения c землей составит: {rate_of_fall:.2f} m/c")
# # Преедмет находится на высоте: 100
# # Скорость сопркосновения c землей составит: 44.27 m/c


# Упражнение 32. Сумма цифр в числе

# Разработайте программу, запрашивающую у пользователя целое число и подсчитывающую сумму составляющих его цифр. Например, если пользователь введет число 3141, программа должна вывести следующий результат: 3 + 1 + 4 + 1 = 9.

# num = input("Введите произвольное целое число: ")

# summa = 0
# for i in list(num):
#     summa += int(i)

# print(summa)
# # Введите произвольное целое число: 45639871
# # 43


# Упражнение 33. Сортировка трех чисел

# Напишите программу, запрашивающую у пользователя три целых числа и выводящую их в упорядоченном виде – по возрастанию. Используйте функции min и max для нахождения наименьшего и наибольшего значений.Оставшееся число можно найти путем вычитания из суммы трех введенных чисел максимального и минимального.

# a = int(input("Введите первое число: "))
# b = int(input("Введите второе число: "))
# c = int(input("Введите третье число: "))

# mn = min(a, b, c)
# mx = max(a, b, c)
# md = mx - mn
# print(mn, mx, md)
# # Введите первое число: 358
# # Введите второе число: 793
# # Введите третье число: 231
# # 231 793 562


# Упражнение 34. Вчерашний хлеб

# Пекарня продает хлеб по $3,49 за буханку. Скидка на вчерашний хлеб составляет 60 %. Напишите программу, которая будет запрашивать у пользователя количество приобретенных вчерашних буханок хлеба. В вывод на экран должны быть включены обычная цена за буханку, цена со скидкой и общая стоимость приобретенного хлеба. Все значения должны быть выведены на отдельных строках с соответствующими описаниями. Используйте для вывода формат с двумя знаками после запятой и выровненным разделителем.

# bread = 3.49
# spring_bread = (bread / 100) * (100 - 60)

# num_spring_bread = int(input("Сколько буханок вчерашнего хлеба вы приобрели: "))
# cost = num_spring_bread * spring_bread

# print(f"Cost of yesterday's bread: {cost:.2f}")
# print(f"The cost of one loaf of today's bread: {bread}")
# print(f"The cost of one loaf of yesterday's bread: {spring_bread:.2f}")
# # Сколько буханок вчерашнего хлеба вы приобрели: 15
# # Cost of yesterday's bread: 20.94
# # The cost of one loaf of today's bread: 3.49
# # The cost of one loaf of yesterday's bread: 1.40


# 2.7. У пражнения
# Упражнение 35. Чет или нечет?

# Напишите программу, запрашивающую у пользователя целое число и выводящую на экран информацию о том, является введенное число четным или нечетным.

# num = int(input("Введите произвольное целое число: "))

# if num % 2 == 0:
#     print(f"Введённое число {num} - чётное")
# else:
#     print(f"Введённое число {num} - нечётное")

# # Введите произвольное целое число: 1236983
# # Введённое число 1236983 - нечётное
# # Введите произвольное целое число: 45896
# # Введённое число 45896 - чётное


# Упражнение 36. Собачий возраст

# Считается, что один год, прожитый собакой, эквивалентен семи человеческим годам. При этом зачастую не учитывается, что собаки становятся абсолютно взрослыми уже к двум годам. Таким образом, многие предпочитают каждый из первых двух лет жизни собаки приравнивать к 10,5 года человеческой жизни, а все последующие – к четырем.
# Напишите программу, которая будет переводить человеческий возраст в собачий с учетом указанной выше логики. Убедитесь, что программа корректно работает при пересчете возраста собаки меньше и больше двух лет. Также программа должна выводить сообщение об ошибке, если пользователь ввел отрицательное число.

# your_age = float(input("Сообщите ваш возраст: "))

# yd_age = 10.5
# od_age = 4

# if your_age <= 0:
#     print("Ошибка: возраст не может быть нулевым или отрицательным")
# elif your_age <= 21:
#     transl_age = your_age / yd_age
#     print(f"Ваш собачий возраст составит: {transl_age:.2f} лет")
# elif your_age <= 100:
#     transl_age = (your_age - yd_age * 2) / 4 + 2
#     print(f"Ваш собачий возраст составит: {transl_age:.2f} лет")


# Упражнение 37. Гласные и согласные

# Разработайте программу, запрашивающую у пользователя букву латинского алфавита. Если введенная буква входит в следующий список (a, e, i, o или u), необходимо вывести сообщение о том, что эта буква гласная. Если была введена буква y, программа должна написать, что эта буква может быть как гласной, так и согласной. Во всех других случаях должно выводиться сообщение о том, что введена согласная буква.

# letter = input("Введите любую букву латинского алфавита: ")
# letter = letter.lower()

# if letter.isalpha():
#     if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u':
#         print("эта буква гласная")
#     elif letter == 'y':
#         print("эта буква может быть как гласной, так и согласной")
#     else:
#         print("эта буква согласная")
# else:
#     print("Ошибка введите букву латинского алфавита")


# ДРУГОЙ ВАРИАНТ:

# letter = input("Введите любую букву латинского алфавита: ").lower()

# if letter.isalpha() and len(letter) == 1:
#     vowels = {'a', 'e', 'i', 'o', 'u'}
#     if letter in vowels:
#         print("эта буква гласная")
#     elif letter == 'y':
#         print("эта буква может быть как гласной, так и согласной")
#     else:
#         print("эта буква согласная")
# else:
#     print("Ошибка, введите одну букву латинского алфавита")

# Что здесь изменено:

# Добавлена проверка len(letter) == 1, чтобы убедиться, что введена ровно одна буква.
# Используется множество vowels для гласных — так условие проще и короче.
# Вызов letter.isalpha() с круглыми скобками, как и нужно.


# Упражнение 39. Сколько дней в месяце?

# Количество дней в месяце варьируется от 28 до 31. Очередная ваша программа должна запрашивать у пользователя название месяца и отображать количество дней в нем. Поскольку годы мы не учитываем, для февраля можно вывести сообщение о том, что этот месяц может состоять как из 28, так и из 29 дней, чтобы учесть фактор високосного года.

# month = input("Введите название месяца: ")
# days = '31'

# sh_month = {'апрель', 'июнь', 'сентябрь', 'ноябрь'}

# if month in sh_month:
#     days = '30'
# elif month == 'февраль':
#     days = "28 или 29"
# print("Количество дней в месяце", month, "равно", days)


# Упражнение 40. Громкость звука

# Отбойный молоток: 130 дБ
# Газовая газонокосилка: 106 дБ
# Будильник: 70 дБ
# Тихая комната: 40 дБ

# Создайте программу, в которой пользователь будет вводить уровень шума в децибелах. Если введенное им значение будет в точности совпадать с одним из значений в приведенной таблице, необходимо вывести, чему соответствует указанный уровень громкости. Если значение попадет между уровнями в таблице, нужно сообщить, между какими именно. Также программа должна выдавать корректные сообщения, в случае если введенное пользователем значение окажется ниже минимального или больше максимального.

# noise_level = int(input("введите цифрами уровень шума (дб): "))

# if noise_level < 40 or noise_level > 130:
#     print("вы вышли за рамки диапазона работы программы!")
# elif 106 < noise_level <= 130:
#     print("соответствует шуму газонокосилки или отбойному молотку")
# elif 70 < noise_level <= 106:
#     print("соответствует шуму будилбника или газонокосилки")
# elif 40 < noise_level <= 70:
#     print("соответствует негромкому шуму")


# Упражнение 41. Классификация треугольников

# Все треугольники могут быть отнесены к тому или иному классу (равнобедренные, равносторонние и разносторонние) на основании длин их сторон. Равносторонний треугольник характеризуется одинаковой длиной всех трех сторон, равнобедренный – двух сторон из трех, а у разностороннего треугольника все стороны разной длины.
# Напишите программу, которая будет запрашивать у пользователя длины всех трех сторон треугольника и выдавать сообщение о том, к какому типу следует его относить.

# a = float(input("первая сторона треугольника: "))
# b = float(input("вторая сторона треугольника: "))
# c = float(input("третья сторона треугольника: "))

# if a == b and b == c:
#     tri_type = 'равносторонний'
# elif a == b or b == c or a == c:
#     tri_type = 'равнобедренный'
# else:
#     tri_type = 'разносторонний'

# print('это', tri_type, 'треугольник')


# Упражнение 42. Узнать частоту по ноте

# Пусть ваша программа запрашивает у пользователя обозначение ноты и показывает ее частоту согласно приведенной таблице. После этого вы можете доработать свою программу таким образом, чтобы она поддерживала все октавы, начиная от субконтроктавы (C0) до пятой октавы (C8). И хотя можно это реализовать путем добавления бесконечного количест­ва блоков if, это будет довольно громоздким, недостаточно элегантным и просто неприемлемым решением данной задачи. Вместо этого при расчетах лучше использовать отношения между одними и теми же нотами в соседствующих октавах. К примеру, частота любой ноты октавы n будет составлять ровно половину от частоты той же ноты октавы n + 1. Используя это соотношение, вы без труда сможете добавить в свою программу учет всех нот любой октавы без присутствия бесчисленных условных блоков.

# Подсказка. Пользователь должен вводить ноту вместе с номером нотации октавы. Начните с разделения буквы, обозначающей ноту, и цифры, соответствующей номеру октавы. Затем определите частоту введенной ноты по представленной выше таблице и разделите ее на (2 ** (4 - octave)), где x – номер октавы в научной нотации, введенный пользователем. Это позволит умножить или разделить на два число из таблицы нужное количество раз.

# C4_FREQ = 261.63
# D4_FREQ = 293.66
# E4_FREQ = 329.63
# F4_FREQ = 349.23
# G4_FREQ = 392.00
# A4_FREQ = 440.00
# B4_FREQ = 493.88

# name = input("Введите название ноты в виде буквы и цифры, например C4: ")
# # Сохраняем название ноты и номер октавы в разных переменных
# note = name[0]
# octave = int(name[1])

# # Получаем частоту ноты четвертой октавы
# if note == "C":
#     freq = C4_FREQ
# elif note == "D":
#     freq = D4_FREQ
# elif note == "E":
#     freq = E4_FREQ
# elif note == "F":
#     freq = F4_FREQ
# elif note == "G":
#     freq = G4_FREQ
# elif note == "A":
#     freq = A4_FREQ
# elif note == "B":
#     freq = B4_FREQ

# # Адаптируем частоту к конкретной октаве
# freq = freq / (2 ** (4 - octave))
# # Выводим результат
# print("Частота ноты", name, "равна", freq)


# Упражнение 44. Портреты на банкнотах

# Напишите программу, которая будет запрашивать у пользователя номинал банкноты и отображать на экране имя деятеля, портрет которого размещен на соответствующем денежном знаке. Если банкноты введенного номинала не существует, должно выводиться сообщение об ошибке.

# banknotes = {'1': "Джордж Вашингтон", '2': 'Томас Джефферсон',
#              '5': "Авраам Линкольн", '10': "Александр Гамильтон",
#              '20': "Эндрю Джексон", '50': "Улисс Грант",
#              '100': "Бенджамин Франклин"}

# banknote = input("какой номинал купюр вас интересует?: ")

# if banknote in banknotes:
#     print(banknotes[banknote])
# elif banknote not in banknotes:
#     print("твкого номинала банкнот нет: ")
# # какой номинал купюр вас интересует?: 50
# # Улисс Грант


# Упражнение 46. Какого цвета клетка?

# Клетки на шахматной доске идентифицируются буквой и цифрой. Буква определяет положение клетки по горизонтали, а цифра – по вертикали.
# Ваша программа должна запрашивать у пользователя координаты клетки. Используйте условное выражение для определения того, с какой клетки – белой или черной – начинается столбец. Затем при помощи обычной арифметики необходимо определить цвет конкретной клетки. Например, если пользователь ввел a1, программа должна определить, что клетка с этими координатами черная. Если d5 – белая. Проверку на ошибочность ввода координат клетки выполнять не нужно.

# coordinates = input(
#     "какая координата клетки на шахмотной доске вас интересует?: ")

# horizontal = coordinates[0]
# vertical = int(coordinates[1])

# black = {'a', 'c', 'e', 'g'}
# white = {'b', 'd', 'f', 'h'}

# if horizontal in black and vertical % 2 == 0:
#     print("данная клетка белая")
# elif horizontal in black and vertical % 2 != 0:
#     print("данная клетка черная")

# elif horizontal in white and vertical % 2 == 0:
#     print("данная клеткв черная")
# elif horizontal in white and vertical % 2 != 0:
#     print("данная клетка белая")

# -------------------------------------------------------------------------------------

# Ваш код работает, но его можно сделать более компактным, читаемым и устойчивым к ошибкам. Вот несколько идей для улучшения:

# Проверять корректность ввода — длина строки, допустимые символы.
# Использовать словари или вычисление цвета клетки более универсально, чтобы избежать повторяющихся условий.
# Приводить ввод к одному регистру для удобства.
# Добавить понятный вывод или функцию для определения цвета.
# Вот улучшенный вариант вашего кода:

# def get_cell_color(coordinates):
#     if len(coordinates) != 2:
#         return "Ошибка: ввод должен содержать 2 символа (буква и цифра)."

#     horizontal = coordinates[0].lower()
#     if horizontal < 'a' or horizontal > 'h':
#         return "Ошибка: буква должна быть от a до h."
#     # 4
#     try:
#         vertical = int(coordinates[1])
#     except ValueError:
#         return "Ошибка: вторая часть должна быть цифрой."
#     if vertical < 1 or vertical > 8:
#         return "Ошибка: цифра должна быть от 1 до 8."

#     # Чёрные клетки: сумма индекса колонки и номера строки нечётна
#     # 'a' -> 1, 'b' -> 2 и т.д.
#     column_index = ord(horizontal) - ord('a') + 1
#     if (column_index + vertical) % 2 == 0:
#         return "данная клетка черная"
#     else:
#         return "данная клетка белая"


# coordinates = input("Какая координата клетки на шахматной доске вас интересует?: ")
# print(get_cell_color(coordinates))


# 1. Определение функции get_cell_color
# Мы создали функцию, которая принимает один параметр: coordinates — строку, в которой пользователь должен ввести координату клетки (например, "a1", "h8").

# 2. Проверка длины ввода:
# Если длина введённой строки не равна 2 символам, значит ввод неправильный (например, "a10" или пустая строка).
# В таком случае функция сразу возвращает сообщение об ошибке.

# 3. Обработка горизонтали (буквы):
# Берём первый символ строки — это должна быть буква, обозначающая столбец.
# Приводим букву к нижнему регистру, чтобы не было ошибки, если введена заглавная (например, A).
# Проверяем, входит ли буква в диапазон от 'a' до 'h', что соответствует столбцам шахматной доски.
# Если буква вне диапазона, возвращаем сообщение об ошибке.

# 4. Обработка вертикали (цифры):
# Пытаемся преобразовать второй символ в число — номер ряда (1-8).
# Если преобразование не удалось (например, если символ — не цифра), возвращаем ошибку.
# Проверяем, что число в диапазоне от 1 до 8.
# Если не попадает в диапазон, возвращаем сообщение об ошибке.

# 5. Определение цвета клетки:
# Функция ord() возвращает числовой код символа в таблице Unicode.
# Например, ord('a') — это 97, ord('b') — 98 и т.д.
# Мы вычисляем номер столбца, начиная с 1 для 'a', используя: ord(horizontal) - ord('a') + 1.
# Затем суммируем этот номер столбца и номер строки (вертикали).
# На шахматной доске цвет клетки определяется по правилу: если сумма (столбец + строка) чётна, клетка чёрная, иначе белая.
# В зависимости от этого условие выбирает, какое сообщение вернуть.

# 6. Ввод с клавиатуры и вывод результата:
# Мы запрашиваем у пользователя координату клетки.
# Потом вызываем функцию get_cell_color с этой координатой.
# Выводим ответ, который вернула функция (цвет клетки или сообщение об ошибке).

# Итог: Таким образом, код:
# Принимает координату.
# Проверяет её корректность.
# Преобразует символы в цифры.
# По простой формуле вычисляет, какого цвета клетка.
# Выводит результат.


# Упражнение 48. Знаки зодиака

# Напишите программу, запрашивающую у пользователя дату его рождения и выводящую на экран соответствующий знак зодиака.

# Козерог - 22 декабря – 19 января
# Рак - 21 июня – 22 июля
# Водолей - 20 января – 18 февраля
#  Лев - 23 июля – 22 августа
# Рыбы - 19 февраля – 20 марта
#  Дева - 23 августа – 22 сентября
# Овен - 21 марта – 19 апреля
#  Весы - 23 сентября – 22 октября
# Телец - 20 апреля – 20 мая
#  Скорпион - 23 октября – 21 ноября
# Близнецы - 21 мая – 20 июня
#  Стрелец - 22 ноября – 21 декабря

# month = input("ваш месяц рождения: ")
# day = int(input("день рождения: "))

# if (month == 'декабрь' and day >= 22) or (month == 'январь' and day <= 19):
#     zodiac_sign = "Козерог"
# elif (month == 'январь' and day >= 20) or (month == 'февраль' and day <= 18):
#     zodiac_sign = "Водолей"
# elif (month == 'февраль' and day >= 19) or (month == 'март' and day <= 20):
#     zodiac_sign = "Рыба"
# elif (month == 'март' and day >= 20) or (month == 'апрель' and day <= 19):
#     zodiac_sign = "Овен"
# elif (month == 'апрель' and day >= 20) or (month == 'май' and day <= 20):
#     zodiac_sign = "Телец"
# elif (month == 'май' and day >= 21) or (month == 'июнь' and day <= 20):
#     zodiac_sign = "Близнецы"
# elif (month == 'июнь' and day >= 21) or (month == 'июль' and day <= 22):
#     zodiac_sign = "Рак"
# elif (month == 'июль' and day >= 23) or (month == 'август' and day <= 22):
#     zodiac_sign = "Лев"
# elif (month == 'август' and day >= 23) or (month == 'сентябрь' and day <= 22):
#     zodiac_sign = "Дева"
# elif (month == 'сентябрь' and day >= 20) or (month == 'октябрь' and day <= 18):
#     zodiac_sign = "Весы"
# elif (month == 'октябрь' and day >= 23) or (month == 'ноябрь' and day <= 21):
#     zodiac_sign = "Скорпион"
# else:
#     zodiac_sign = "Стрелец"

# print(f"Ваш знак зодиака: {zodiac_sign}")


# Упражнение 49. Китайский гороскоп

# Напишите программу, которая будет запрашивать у пользователя год рождения и выводить ассоциированное с ним название животного по китайскому гороскопу. При этом программа не должна ограничиваться только годами из приведенной таблицы, а должна корректно обрабатывать все годы нашей эры.

# 2000 Дракон
# 2001 Змея
# 2002 Лошадь
# 2003 Коза
# 2004 Обезьяна
# 2005 Петух
# 2006 Собака
# 2007 Свинья
# 2008 Крыса
# 2009 Бык
# 2010 Тигр
# 2011 Кролик

# year = int(input("Какой год вас интересует?: "))

# if year % 12 == 0:
#     year = 'Обезьяна'
# elif year % 12 == 1:
#     year = 'Петух'
# elif year % 12 == 2:
#     year = 'Собака'
# elif year % 12 == 3:
#     year = 'Свинья'
# elif year % 12 == 4:
#     year = 'Крыса'
# elif year % 12 == 5:
#     year = 'Бык'
# elif year % 12 == 6:
#     year = 'Тигр'
# elif year % 12 == 7:
#     year = 'Кролик'
# elif year % 12 == 8:
#     year = 'Дракон'
# elif year % 12 == 9:
#     year = 'Змея'
# elif year % 12 == 10:
#     year = 'Лошадь'
# elif year % 12 == 11:
#     year = 'Коза'

# print(f"Этот год соответствует животному: {year}")




