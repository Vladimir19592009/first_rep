# Упражнение 110. Порядок сортировки

# Напишите программу, которая будет запрашивать у пользователя целочисленные значения и сохранять их в виде списка. Индикатором окончания ввода значений должен служить ноль. Затем программа должна вывести на экран все введенные пользователем числа (кроме нуля) в порядке возрастания – по одному значению в строке. Используйте для сортировки либо метод sort, либо функцию sorted.

# data = []

# num = int(input("Введите целое число (0 для окончания ввода): "))
# while num != 0:
#     data.append(num)
#     num = int(input("Введите целое число (0 для окончания ввода): "))

# print(data)
# data.sort()
# print(data)
# print("Введенные числа в порядке возрастания: ")
# for num in data:
#     print(num, end=' ')


# Упражнение 111. Обратный порядок

# Напишите программу, которая, как и в предыдущем случае, будет запрашивать у пользователя целые числа и сохранять их в виде списка. Индикатором окончания ввода значений также должен служить ноль. На этот раз необходимо вывести на экран введенные значения в порядке убывания.

# data = []
# num = int(input("Введите целое число (0 для окончания ввода): "))

# while num != 0:
#     data.append(num)
#     num = int(input("Введите целое число (0 для окончания ввода): "))

# data.sort()
# print(data)
# data.reverse()
# print(data)

# for num in data:
#     print(num, end=' ')


# Упражнение 112. Удаляем выбросы (data processing)

# При анализе собранных по результатам научных экспериментов данных зачастую возникает необходимость избавиться от экстремальных значений, прежде чем продолжать двигаться дальше. Напишите функцию, создающую копию списка с исключенными из него n наибольшими и наименьшими значениями и возвращающую ее в качестве результата. Порядок следования элементов в измененном списке не обязательно должен в точности совпадать с источником.
# В основной программе должна быть продемонстрирована работа вашей функции. Для начала попросите пользователя ввести целые числа, затем соберите их в список и вызовите написанную вами ранее функцию. Выведите на экран измененную версию списка вместе с оригинальной. Если пользователь введет менее четырех чисел, должно быть отображено соответствующее сообщение об ошибке.


# data = []

# num = int(input("Введите целое число (0 для окончания ввода): "))
# while num != 0:
#     data.append(num)
#     num = int(input("Введите целое число (0 для окончания ввода): "))

# while len(data) <= 4:
#     num = int(input("Введите целое число (0 для окончания ввода): "))
#     data.append(num)
# print(data)

# my_set = set(data)
# data = list(my_set)
# data.sort()
# print(data)

# data.pop()
# data.pop(0)
# print(data)


# Упражнение 113. Избавляемся от дубликатов

# В данном упражнении вам предстоит разработать программу, в которой у пользователя будет запрошен список слов, пока он не оставит строку ввода пустой. После этого на экране должны быть показаны слова, введенные пользователем, но без повторов, – каждое по одному разу. При этом слова должны быть отображены в том же порядке, в каком их вводили с клавиатуры. Например, если пользователь на запрос программы введет следующий список слов:
# first
# second
# first
# third
# second
# программа должна вывести:
# first
# second
# third

# data = []

# word = input('Введите слово (всего их потребуется пять. B конце нажмите Enter): ')
# while word != "":
#     data.append(word)
#     word = input('Введите слово (всего их потребуется пять. B конце нажмите Enter): ')

# data = list(dict.fromkeys(data))
# print(data)
# for item in data:
#     print(item)
# # все работает

# Упражнение 114. Отрицательные, положительные и нули.

# Напишите программу, запрашивающую у пользователя целые числа, пока он не оставит строку ввода пустой. После окончания ввода на экран должны быть выведены сначала все отрицательные числа, которые были введены, затем нулевые и только после этого положительные. Внутри каждой группы числа должны отображаться в той последовательности, в которой были введены пользователем. Например, если он ввел следующие числа: 3, -4, 1, 0, -1, 0 и -2, вывод должен оказаться таким: -4, -1, -2, 0, 0, 3 и 1.Каждое значение должно отображаться на новой строке.

# data1 = []
# data2 = []
# data3 = []
# # ввел 9, 7, -5, -6, 0, 3, -1, 0
# line = input("Введите целое число (Enter для окончания ввода): ")

# while line != "":
#     num = int(line)
#     if num < 0:
#         data1.append(num)
#     elif num > 0:
#         data3.append(num)
#     else:
#         data2.append(num)

#     num = line = input("Введите целое число (Enter для окончания ввода): ")

# data = data1 + data2 + data3
# for item in data:
#     print(item, end=' ') # -5 -6 -1 0 0 9 7 3


# Упражнение 115. Список собственных делителей

# Собственным делителем числа называется всякий его делитель, отличный от самого числа. Напишите функцию, которая будет возвращать список всех собственных делителей заданного числа. Само это число должно передаваться в функцию в виде единственного аргумента. Результатом функции будет перечень собственных делителей числа, собранных в список. Основная программа должна демонстрировать работу функции, запрашивая у пользователя число и выводя на экран список его собственных делителей. Программа должна запускаться только в том случае, если она не импортирована в виде модуля в другой файл.
