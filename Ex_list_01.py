# Упражнение 110. Порядок сортировки

# Напишите программу, которая будет запрашивать у пользователя целочисленные значения и сохранять их в виде списка. Индикатором окончания ввода значений должен служить ноль. Затем программа должна вывести на экран все введенные пользователем числа (кроме нуля) в порядке возрастания – по одному значению в строке. Используйте для сортировки либо метод sort, либо функцию sorted.

# data = []

# num = int(input("Введите целое число (0 для окончания ввода): "))
# while num != 0:
#     data.append(num)
#     num = int(input("Введите целое число (0 для окончания ввода): "))

# print(data)
# data.sort()
# print(data)
# print("Введенные числа в порядке возрастания: ")
# for num in data:
#     print(num, end=' ')


# Упражнение 111. Обратный порядок

# Напишите программу, которая, как и в предыдущем случае, будет запрашивать у пользователя целые числа и сохранять их в виде списка. Индикатором окончания ввода значений также должен служить ноль. На этот раз необходимо вывести на экран введенные значения в порядке убывания.

# data = []
# num = int(input("Введите целое число (0 для окончания ввода): "))

# while num != 0:
#     data.append(num)
#     num = int(input("Введите целое число (0 для окончания ввода): "))

# data.sort()
# print(data)
# data.reverse()
# print(data)

# for num in data:
#     print(num, end=' ')


# Упражнение 112. Удаляем выбросы (data processing)

# При анализе собранных по результатам научных экспериментов данных зачастую возникает необходимость избавиться от экстремальных значений, прежде чем продолжать двигаться дальше. Напишите функцию, создающую копию списка с исключенными из него n наибольшими и наименьшими значениями и возвращающую ее в качестве результата. Порядок следования элементов в измененном списке не обязательно должен в точности совпадать с источником.
# В основной программе должна быть продемонстрирована работа вашей функции. Для начала попросите пользователя ввести целые числа, затем соберите их в список и вызовите написанную вами ранее функцию. Выведите на экран измененную версию списка вместе с оригинальной. Если пользователь введет менее четырех чисел, должно быть отображено соответствующее сообщение об ошибке.


# data = []

# num = int(input("Введите целое число (0 для окончания ввода): "))
# while num != 0:
#     data.append(num)
#     num = int(input("Введите целое число (0 для окончания ввода): "))

# while len(data) <= 4:
#     num = int(input("Введите целое число (0 для окончания ввода): "))
#     data.append(num)
# print(data)

# my_set = set(data)
# data = list(my_set)
# data.sort()
# print(data)

# data.pop()
# data.pop(0)
# print(data)


# Упражнение 113. Избавляемся от дубликатов

# В данном упражнении вам предстоит разработать программу, в которой у пользователя будет запрошен список слов, пока он не оставит строку ввода пустой. После этого на экране должны быть показаны слова, введенные пользователем, но без повторов, – каждое по одному разу. При этом слова должны быть отображены в том же порядке, в каком их вводили с клавиатуры. Например, если пользователь на запрос программы введет следующий список слов:
# first
# second
# first
# third
# second
# программа должна вывести:
# first
# second
# third

# data = []

# word = input('Введите слово (всего их потребуется пять. B конце нажмите Enter): ')
# while word != "":
#     data.append(word)
#     word = input('Введите слово (всего их потребуется пять. B конце нажмите Enter): ')

# data = list(dict.fromkeys(data))
# print(data)
# for item in data:
#     print(item)
# # все работает

# Упражнение 114. Отрицательные, положительные и нули.

# Напишите программу, запрашивающую у пользователя целые числа, пока он не оставит строку ввода пустой. После окончания ввода на экран должны быть выведены сначала все отрицательные числа, которые были введены, затем нулевые и только после этого положительные. Внутри каждой группы числа должны отображаться в той последовательности, в которой были введены пользователем. Например, если он ввел следующие числа: 3, -4, 1, 0, -1, 0 и -2, вывод должен оказаться таким: -4, -1, -2, 0, 0, 3 и 1.Каждое значение должно отображаться на новой строке.

# data1 = []
# data2 = []
# data3 = []
# # ввел 9, 7, -5, -6, 0, 3, -1, 0
# line = input("Введите целое число (Enter для окончания ввода): ")

# while line != "":
#     num = int(line)
#     if num < 0:
#         data1.append(num)
#     elif num > 0:
#         data3.append(num)
#     else:
#         data2.append(num)

#     num = line = input("Введите целое число (Enter для окончания ввода): ")

# data = data1 + data2 + data3
# for item in data:
#     print(item, end=' ') # -5 -6 -1 0 0 9 7 3


# Упражнение 115. Список собственных делителей

# Собственным делителем числа называется всякий его делитель, отличный от самого числа. Напишите функцию, которая будет возвращать список всех собственных делителей заданного числа. Само это число должно передаваться в функцию в виде единственного аргумента. Результатом функции будет перечень собственных делителей числа, собранных в список. Основная программа должна демонстрировать работу функции, запрашивая у пользователя число и выводя на экран список его собственных делителей. Программа должна запускаться только в том случае, если она не импортирована в виде модуля в другой файл.

# def main():
#     num = int(input("Введите целое число: "))
#     properDivisors(num)

# def properDivisors(num):
#     divisors = []
#     n = list(range(1, num))
#     for i in n:
#         if num % i == 0:
#             divisors.append(i)
#     print(divisors)
# main()

# Ваш код можно улучшить как с точки зрения эффективности, так и с точки зрения стиля. Приведённый ниже код имеет улучшения, включая использование списка списков и генераторов, а также более ясные имена функций. Кроме того, проверку на целочисленность можно сделать при помощи обработки исключений для обеспечения корректного ввода:

# def main():
#     try:
#         num = int(input("Введите целое число: "))
#         divisors = find_proper_divisors(num)
#         print("Делители:", divisors)
#     except ValueError:
#         print("Пожалуйста, введите корректное целое число.")

# def find_proper_divisors(num):
#     return [i for i in range(1, num) if num % i == 0]

# if __name__ == "__main__":
#     main()

# Изменения и улучшения:

# 1. Именование функций: Я изменил имя функции properDivisors на find_proper_divisors, чтобы лучше отражать её назначение.

# 2. Использование генераторов списков: Это упрощает код и может повысить производительность, особенно при больших числах.

# 3. Обработка ошибок: Добавление обработки исключений позволяет избежать сбоев, если пользователь введёт неправильный тип данных.

# 4. Основная точка входа: Проверка if __name__ == "__main__": позволяет использовать функцию main и в качестве исполняемого скрипта, и в качестве импортируемого модуля.


# Упражнение 116. Совершенные числа

# Целое число n называется совершенным, если сумма всех его собственных делителей равна самому числу n. Например, 28 – это совершенное число, поскольку его собственными делителями являются 1, 2, 4, 7 и 14, а 1 + 2+ 4 + 7 + 14 = 28.
# Напишите функцию для определения того, является ли заданное число совершенным. Функция будет принимать на вход единственный параметр и возвращать True, если он представляет собой совершенное число, и False – если нет. Разработайте небольшую программу, которая будет использовать функцию для идентификации и вывода на экран всех совершенных чисел в диапазоне от 1 до 10 000. При решении этой задачи импортируйте функцию, написанную в упражнении 115.

# Вот программа на Python, которая использует функцию для идентификации и вывода всех совершенных чисел в диапазоне от 1 до 1000:


# def is_perfect_number(num):
#     """Проверяет, является ли число совершенным."""
#     if num < 1:
#         return False
#     divisors_sum = sum(i for i in range(1, num) if num % i == 0)
#     return divisors_sum == num

# def find_perfect_numbers(limit):
#     """Ищет все совершенные числа в заданном диапазоне."""
#     perfect_numbers = []
#     for i in range(1, limit + 1):
#         if is_perfect_number(i):
#             perfect_numbers.append(i)
#     return perfect_numbers

# def main():
#     limit = 1000
#     perfect_numbers = find_perfect_numbers(limit)
#     print(f"Совершенные числа в диапазоне от 1 до {limit}: {perfect_numbers}")

# if __name__ == "__main__":
#     main()


# Как работает код:
# 1. Функция `is_perfect_number(num) - Принимает целое число и вычисляет сумму его делителей (исключая само число).
# - Возвращает `True`, если сумма делителей равна числу, иначе — `False`.

# 2. Функция `find_perfect_numbers(limit)`:
# - Перебирает числа от 1 до заданного лимита.
# - Использует `is_perfect_number()` для проверки, является ли каждое число совершенным.
# - Возвращает список всех совершенных чисел.

# 3. Функция `main()`:
# - Определяет лимит, вызывает функцию для поиска совершенных чисел и выводит их на экран.

# Результат:
# Когда вы запустите эту программу, она выведет все совершенные числа в диапазоне от 1 до 1000. Совершенные числа в этом диапазоне: **6, 28, 496**.
# -------------------------------------------------------------------------------


# Упражнение 118. Словесные палиндромы
# Напишите программу, которая будет запрашивать строку у пользователя и оповещать его о том, является ли она словесным палиндромом. Не забывайте игнорировать знаки препинания при выявлении результата.

# Для проверки работы программы используйте предложение: "Herb the sage eats sage, the herb" или "Information school graduate seeks graduate school information"

# my_string = "Information school graduate seeks graduate school information"
# my_string = my_string.lower()
# word_list = my_string.split()

# new_word_list = word_list[::-1]

# if new_word_list == word_list:
#     print("Строка является словесным полиндромом")
# else:
#     print("Строка словесным палиндромом не явяется")

# # ['information', 'school', 'graduate', 'seeks', 'graduate', 'school', 'information']
# print(word_list)
# # ['information', 'school', 'graduate', 'seeks', 'graduate', 'school', 'information']
# print(new_word_list)
# Строка является словесным полиндромом


# Упражнение 119. Ниже и выше среднего

my_list = ['apple', 'greep', 'banana', 'lemon']
my_list.insert(-1, 'and')
print(my_list)  # ['apple', 'greep', 'banana', 'and', 'lemon']

result_str = ', '.join(my_list)
print(result_str)  #apple, greep, banana, and, lemon

